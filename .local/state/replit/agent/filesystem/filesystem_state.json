{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom flask_mail import Mail\nfrom flask_wtf.csrf import CSRFProtect\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\nlogin_manager = LoginManager()\nmail = Mail()\ncsrf = CSRFProtect()\n\ndef create_app():\n    app = Flask(__name__)\n\n    # Track user activity on every request (must be after app is created)\n    from flask_login import current_user\n    from datetime import datetime\n\n    @app.before_request\n    def update_last_active():\n        if hasattr(current_user, 'is_authenticated') and current_user.is_authenticated:\n            from models import db, User\n            now = datetime.utcnow()\n            if not current_user.last_active or (now - current_user.last_active).total_seconds() > 60:\n                current_user.last_active = now\n                db.session.commit()\n\n    # Configuration\n    app.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-change-in-production-\" + str(hash(\"darksulfocus\")))\n    app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n    \n    # Server configuration for URL generation\n    # Priority: PRODUCTION_DOMAIN > REPLIT_DOMAINS > localhost fallback\n    production_domain = os.environ.get('PRODUCTION_DOMAIN')\n    replit_domain = os.environ.get('REPLIT_DOMAINS')\n    \n    if production_domain:\n        # Production deployment (e.g., Render, Heroku)\n        app.config['SERVER_NAME'] = production_domain\n        app.config['PREFERRED_URL_SCHEME'] = 'https'\n    elif replit_domain:\n        # Replit deployment\n        app.config['SERVER_NAME'] = replit_domain.split(',')[0]\n        app.config['PREFERRED_URL_SCHEME'] = 'https'\n    else:\n        # Local development\n        app.config['SERVER_NAME'] = 'localhost:5000'\n        app.config['PREFERRED_URL_SCHEME'] = 'http'\n    \n    app.config['APPLICATION_ROOT'] = '/'\n\n    # Database configuration\n    db_url = os.environ.get(\"DATABASE_URL\")\n    if not db_url:\n        # Ensure instance directory exists\n        os.makedirs(os.path.join(app.root_path, '..', 'instance'), exist_ok=True)\n        db_url = \"sqlite:///\" + os.path.abspath(os.path.join(app.root_path, '..', 'instance', 'darksulfocus.db'))\n    app.config[\"SQLALCHEMY_DATABASE_URI\"] = db_url\n    app.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n        \"pool_recycle\": 300,\n        \"pool_pre_ping\": True,\n    }\n    app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n\n    # Mail configuration\n    app.config['MAIL_SERVER'] = os.environ.get('MAIL_SERVER', 'smtp.gmail.com')\n    app.config['MAIL_PORT'] = int(os.environ.get('MAIL_PORT', '587'))\n    app.config['MAIL_USE_TLS'] = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']\n    app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')\n    app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')\n    app.config['MAIL_DEFAULT_SENDER'] = os.environ.get('MAIL_DEFAULT_SENDER', 'noreply@darksulfocus.com')\n\n    # Upload configuration\n    app.config['UPLOAD_FOLDER'] = 'static/uploads'\n    app.config['MAX_CONTENT_LENGTH'] = 5 * 1024 * 1024  # 5MB max file size\n\n    # Initialize extensions\n    db.init_app(app)\n    login_manager.init_app(app)\n    mail.init_app(app)\n    csrf.init_app(app)\n\n    # Login manager configuration\n    login_manager.login_view = 'main.login'  # type: ignore\n    login_manager.login_message = 'Please log in to access this page.'\n    login_manager.login_message_category = 'info'\n    \n    @login_manager.user_loader\n    def load_user(user_id):\n        from models import User\n        return User.query.get(int(user_id))\n    \n    # Register blueprints\n    from routes import main\n    from email_preferences import email_prefs\n    app.register_blueprint(main)\n    app.register_blueprint(email_prefs)\n    \n    # Create tables\n    with app.app_context():\n        import models\n        db.create_all()\n        \n        # Create upload directory\n        os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n        \n        # Start email scheduler for automated emails\n        try:\n            from email_scheduler import email_scheduler\n            email_scheduler.start()\n            app.logger.info(\"Email scheduler started successfully\")\n        except Exception as e:\n            app.logger.error(f\"Failed to start email scheduler: {e}\")\n        \n        # Start background timer service for auto-completion\n        try:\n            from background_timer import background_timer_service\n            background_timer_service.start()\n            app.logger.info(\"Background timer service started successfully\")\n        except Exception as e:\n            app.logger.error(f\"Failed to start background timer service: {e}\")\n    \n    return app\n\napp = create_app()\n","size_bytes":4928},"background_timer.py":{"content":"\"\"\"\nBackground Timer Service\nHandles server-side timer completion checking and auto-completion\n\"\"\"\nfrom datetime import datetime\nimport time\nimport threading\nimport logging\nimport pytz\n\nclass BackgroundTimerService:\n    def __init__(self):\n        self.running = False\n        self.thread = None\n        self.check_interval = 30  # Check every 30 seconds\n        \n    def start(self):\n        \"\"\"Start the background timer service\"\"\"\n        if not self.running:\n            self.running = True\n            self.thread = threading.Thread(target=self._run_checker, daemon=True)\n            self.thread.start()\n            logging.info(\"Background Timer Service started\")\n            \n    def stop(self):\n        \"\"\"Stop the background timer service\"\"\"\n        self.running = False\n        if self.thread:\n            self.thread.join(timeout=5)\n        logging.info(\"Background Timer Service stopped\")\n        \n    def _run_checker(self):\n        \"\"\"Main loop to check for completed timers\"\"\"\n        while self.running:\n            try:\n                # Check if we should run based on IST timezone\n                if self._should_run_now():\n                    # Import here to avoid circular imports\n                    from app import app, db\n                    with app.app_context():\n                        self._check_completed_timers()\n                else:\n                    logging.info(\"Skipping background service - quiet hours (12 AM - 6 AM IST)\")\n            except Exception as e:\n                logging.error(f\"Error in background timer checker: {e}\")\n            \n            # Wait before next check\n            time.sleep(self.check_interval)\n    \n    def _should_run_now(self):\n        \"\"\"Check if background service should run (not between 12 AM - 6 AM IST)\"\"\"\n        ist = pytz.timezone('Asia/Kolkata')\n        current_time = datetime.now(ist)\n        current_hour = current_time.hour\n        \n        # Don't run between 12 AM (0) and 6 AM (6) IST\n        if 0 <= current_hour < 6:\n            return False\n        return True\n    \n    def _check_completed_timers(self):\n        \"\"\"Check for timers that should be completed and process them\"\"\"\n        from app import db\n        from models import Task, Challenge\n        \n        # Find all active tasks that should be completed\n        completed_tasks = Task.query.filter(\n            Task.is_active.is_(True),\n            Task.is_completed.is_(False),\n            Task.expected_completion <= datetime.utcnow()\n        ).all()\n        \n        if completed_tasks:\n            logging.info(f\"Found {len(completed_tasks)} completed timers\")\n            \n        for task in completed_tasks:\n            try:\n                # Complete the task\n                points_earned = task.complete_task()\n                \n                # Stop the server-side timer\n                task.is_active = False\n                task.started_at = None\n                task.expected_completion = None\n                \n                db.session.commit()\n                \n                # Send achievement email if user has notifications enabled\n                from models import User\n                user = db.session.get(User, task.user_id)\n                if user and user.achievement_emails:\n                    try:\n                        from email_service import EmailService\n                        EmailService.send_achievement_unlock(user, 'task_completion', {\n                            'task_title': task.title,\n                            'points_earned': points_earned,\n                            'total_points': user.total_points\n                        })\n                    except Exception as e:\n                        logging.error(f\"Failed to send completion email to user {user.id}: {e}\")\n                \n                logging.info(f\"Auto-completed task {task.id} for user {task.user_id}, awarded {points_earned:.1f} points\")\n                \n            except Exception as e:\n                logging.error(f\"Error completing task {task.id}: {e}\")\n                db.session.rollback()\n        \n        # Check for completed challenges\n        self._check_completed_challenges()\n    \n    def _check_completed_challenges(self):\n        \"\"\"Check for challenges that should be completed and process them\"\"\"\n        from app import db\n        from models import Challenge\n        \n        # Find all active challenges that should be completed\n        completed_challenges = Challenge.query.filter(\n            Challenge.status == 'active'\n        ).filter(\n            Challenge.end_date <= datetime.utcnow()\n        ).all()\n        \n        if completed_challenges:\n            logging.info(f\"Found {len(completed_challenges)} completed challenges\")\n            \n        for challenge in completed_challenges:\n            try:\n                challenge.calculate_winner()\n                db.session.commit()\n                logging.info(f\"Challenge {challenge.id} completed automatically\")\n            except Exception as e:\n                logging.error(f\"Error completing challenge {challenge.id}: {e}\")\n                db.session.rollback()\n\n# Global instance\nbackground_timer_service = BackgroundTimerService()","size_bytes":5205},"email_preferences.py":{"content":"\"\"\"Email preferences management for DARKSULFOCUS\"\"\"\nfrom flask import Blueprint, render_template, request, flash, redirect, url_for, jsonify\nfrom flask_login import login_required, current_user\nfrom app import db\n\nemail_prefs = Blueprint('email_prefs', __name__)\n\n@email_prefs.route('/email-preferences', methods=['GET', 'POST'])\n@login_required\ndef manage_preferences():\n    \"\"\"Manage user email preferences\"\"\"\n    if request.method == 'POST':\n        # Update email preferences\n        current_user.email_notifications = request.form.get('email_notifications') == 'on'\n        current_user.daily_reminders = request.form.get('daily_reminders') == 'on'\n        current_user.weekly_summaries = request.form.get('weekly_summaries') == 'on'\n        current_user.achievement_emails = request.form.get('achievement_emails') == 'on'\n        current_user.challenge_emails = request.form.get('challenge_emails') == 'on'\n        \n        db.session.commit()\n        flash('Email preferences updated successfully!', 'success')\n        return redirect(url_for('email_prefs.manage_preferences'))\n    \n    return render_template('email_preferences.html', user=current_user)\n\n@email_prefs.route('/api/email-preferences', methods=['POST'])\n@login_required\ndef api_update_preferences():\n    \"\"\"API endpoint for updating email preferences\"\"\"\n    data = request.get_json()\n    \n    try:\n        current_user.email_notifications = data.get('email_notifications', True)\n        current_user.daily_reminders = data.get('daily_reminders', True)\n        current_user.weekly_summaries = data.get('weekly_summaries', True)\n        current_user.achievement_emails = data.get('achievement_emails', True)\n        current_user.challenge_emails = data.get('challenge_emails', True)\n        \n        db.session.commit()\n        return jsonify({'success': True, 'message': 'Preferences updated successfully'})\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 400","size_bytes":1970},"email_scheduler.py":{"content":"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom datetime import datetime, timedelta\nimport pytz\nimport logging\n\nclass EmailScheduler:\n    def send_super_motivation_emails(self):\n        \"\"\"Send super motivation emails to all users\"\"\"\n        from app import db, app\n        from models import User\n        from email_service import EmailService\n        with app.app_context():\n            try:\n                users = db.session.query(User).filter(\n                    User.is_verified == True,\n                    User.email_notifications == True\n                ).all()\n                count = 0\n                for user in users:\n                    if EmailService.send_super_motivation_email(user):\n                        count += 1\n                logging.info(f\"Sent {count} super motivation emails\")\n            except Exception as e:\n                logging.error(f\"Error sending super motivation emails: {e}\")\n    \"\"\"Background email scheduler for automated email campaigns\"\"\"\n    \n    def __init__(self):\n        self.scheduler = BackgroundScheduler()\n        self.setup_jobs()\n    \n    def setup_jobs(self):\n        \"\"\"Setup all scheduled email jobs\"\"\"\n        \n        # Daily reminder emails at 6 PM IST (18:00)\n        self.scheduler.add_job(\n            func=self.send_daily_reminders,\n            trigger=CronTrigger(hour=18, minute=0, timezone=pytz.timezone('Asia/Kolkata')),\n            id='daily_reminders',\n            name='Send daily study reminders',\n            replace_existing=True\n        )\n\n        # Streak warning emails at 9 PM IST (21:00)\n        self.scheduler.add_job(\n            func=self.send_streak_warnings,\n            trigger=CronTrigger(hour=21, minute=0, timezone=pytz.timezone('Asia/Kolkata')),\n            id='streak_warnings',\n            name='Send streak warning emails',\n            replace_existing=True\n        )\n\n        # Weekly progress emails every Sunday at 10 AM IST\n        self.scheduler.add_job(\n            func=self.send_weekly_progress,\n            trigger=CronTrigger(day_of_week=6, hour=10, minute=0, timezone=pytz.timezone('Asia/Kolkata')),\n            id='weekly_progress',\n            name='Send weekly progress summaries',\n            replace_existing=True\n        )\n\n        # Re-engagement emails every day at 12 PM IST\n        self.scheduler.add_job(\n            func=self.send_reengagement_emails,\n            trigger=CronTrigger(hour=12, minute=0, timezone=pytz.timezone('Asia/Kolkata')),\n            id='reengagement',\n            name='Send re-engagement emails',\n            replace_existing=True\n        )\n\n        # Welcome series emails every day at 9 AM IST\n        self.scheduler.add_job(\n            func=self.send_welcome_series,\n            trigger=CronTrigger(hour=9, minute=0, timezone=pytz.timezone('Asia/Kolkata')),\n            id='welcome_series',\n            name='Send welcome series emails',\n            replace_existing=True\n        )\n\n        # Super motivation emails every day at 12:30 PM IST\n        self.scheduler.add_job(\n            func=self.send_super_motivation_emails,\n            trigger=CronTrigger(hour=12, minute=30, timezone=pytz.timezone('Asia/Kolkata')),\n            id='super_motivation',\n            name='Send super motivation emails',\n            replace_existing=True\n        )\n    \n    def start(self):\n        \"\"\"Start the email scheduler\"\"\"\n        if not self.scheduler.running:\n            self.scheduler.start()\n            logging.info(\"Email scheduler started\")\n    \n    def stop(self):\n        \"\"\"Stop the email scheduler\"\"\"\n        if self.scheduler.running:\n            self.scheduler.shutdown()\n            logging.info(\"Email scheduler stopped\")\n    \n    def send_daily_reminders(self):\n        \"\"\"Send daily study reminders to users who haven't studied today\"\"\"\n        from app import db\n        from models import User, DailyStats\n        from email_service import EmailService\n        from app import app\n        \n        with app.app_context():\n            try:\n                ist = pytz.timezone('Asia/Kolkata')\n                today = datetime.now(ist).date()\n                \n                # Get users who haven't studied today and are active\n                users_to_remind = db.session.query(User).filter(\n                    User.is_verified.is_(True),\n                    User.daily_reminders.is_(True)\n                ).all()\n                \n                reminder_count = 0\n                for user in users_to_remind:\n                    # Check if user has studied today\n                    daily_stat = DailyStats.query.filter_by(\n                        user_id=user.id, \n                        date=today\n                    ).first()\n                    \n                    if not daily_stat or daily_stat.minutes_studied == 0:\n                        if EmailService.send_daily_reminder(user):\n                            reminder_count += 1\n                \n                logging.info(f\"Sent {reminder_count} daily reminder emails\")\n                \n            except Exception as e:\n                logging.error(f\"Error sending daily reminders: {e}\")\n    \n    def send_streak_warnings(self):\n        \"\"\"Send streak warning emails to users about to lose their streak\"\"\"\n        from app import db\n        from models import User, DailyStats\n        from email_service import EmailService\n        from app import app\n        \n        with app.app_context():\n            try:\n                ist = pytz.timezone('Asia/Kolkata')\n                today = datetime.now(ist).date()\n                \n                # Get users with active streaks who haven't studied today\n                users_at_risk = db.session.query(User).filter(\n                    User.current_streak > 0,\n                    User.is_verified.is_(True),\n                    User.email_notifications.is_(True)\n                ).all()\n                \n                warning_count = 0\n                for user in users_at_risk:\n                    # Check if user hasn't studied today\n                    daily_stat = DailyStats.query.filter_by(\n                        user_id=user.id, \n                        date=today\n                    ).first()\n                    \n                    if not daily_stat or daily_stat.minutes_studied == 0:\n                        if EmailService.send_streak_warning(user):\n                            warning_count += 1\n                \n                logging.info(f\"Sent {warning_count} streak warning emails\")\n                \n            except Exception as e:\n                logging.error(f\"Error sending streak warnings: {e}\")\n    \n    def send_weekly_progress(self):\n        \"\"\"Send weekly progress summaries\"\"\"\n        from app import db\n        from models import User, DailyStats\n        from email_service import EmailService\n        from app import app\n        \n        with app.app_context():\n            try:\n                # Get all active users\n                active_users = db.session.query(User).filter(\n                    User.is_verified.is_(True),\n                    User.weekly_summaries.is_(True)\n                ).all()\n                \n                progress_count = 0\n                for user in active_users:\n                    if EmailService.send_weekly_progress(user):\n                        progress_count += 1\n                \n                logging.info(f\"Sent {progress_count} weekly progress emails\")\n                \n            except Exception as e:\n                logging.error(f\"Error sending weekly progress emails: {e}\")\n    \n    def send_reengagement_emails(self):\n        \"\"\"Send re-engagement emails to inactive users\"\"\"\n        from app import db\n        from models import User, DailyStats\n        from email_service import EmailService\n        from app import app\n        \n        with app.app_context():\n            try:\n                ist = pytz.timezone('Asia/Kolkata')\n                week_ago = datetime.now(ist).date() - timedelta(days=7)\n                \n                # Find users who haven't studied in the last 7 days\n                inactive_users = db.session.query(User).filter(\n                    User.is_verified.is_(True),\n                    User.email_notifications.is_(True)\n                ).all()\n                \n                reengagement_count = 0\n                for user in inactive_users:\n                    # Check if user has any recent activity\n                    recent_stats = DailyStats.query.filter(\n                        DailyStats.user_id == user.id,\n                        DailyStats.date >= week_ago,\n                        DailyStats.minutes_studied > 0\n                    ).first()\n                    \n                    if not recent_stats:\n                        if EmailService.send_reengagement_email(user):\n                            reengagement_count += 1\n                \n                logging.info(f\"Sent {reengagement_count} re-engagement emails\")\n                \n            except Exception as e:\n                logging.error(f\"Error sending re-engagement emails: {e}\")\n    \n    def send_welcome_series(self):\n        \"\"\"Send welcome series emails to new users\"\"\"\n        from app import db\n        from models import User, DailyStats\n        from email_service import EmailService\n        from app import app\n        \n        with app.app_context():\n            try:\n                today = datetime.utcnow().date()\n                yesterday = today - timedelta(days=1)\n                \n                # Find users who registered yesterday (for day 1 email)\n                new_users = db.session.query(User).filter(\n                    User.joined_date >= yesterday,\n                    User.joined_date < today,\n                    User.is_verified.is_(True)\n                ).all()\n                \n                welcome_count = 0\n                for user in new_users:\n                    if EmailService.send_welcome_series_day1(user):\n                        welcome_count += 1\n                \n                logging.info(f\"Sent {welcome_count} welcome series emails\")\n                \n            except Exception as e:\n                logging.error(f\"Error sending welcome series emails: {e}\")\n\n# Global scheduler instance\nemail_scheduler = EmailScheduler()","size_bytes":10351},"email_service.py":{"content":"\nfrom flask import url_for, current_app\nfrom flask_mail import Message\nfrom datetime import datetime, timedelta\nimport pytz\nfrom models import DailyStats\n\nclass EmailService:\n\n    @staticmethod\n    def send_super_motivation_email(user):\n        \"\"\"Send a super motivation email to the user\"\"\"\n        template = EmailService.get_email_template_base()\n        msg = Message(\n            'Super Motivation: You Can Do It! 💪',\n            recipients=[user.email]\n        )\n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"{template['header_style']}\">\n                <h1 style=\"color: {template['brand_color']}; margin: 0;\">DARKSULFOCUS</h1>\n                <p style=\"color: #cccccc; margin: 10px 0 0 0;\">Super Motivation</p>\n            </div>\n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: {template['heading_color']}; margin-top: 0;\">Keep Going, You're Amazing!</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6;\">\n                    Remember, every small step you take brings you closer to your goals. Stay focused, stay positive, and never give up!<br><br>\n                    <b>You have the power to achieve great things. Let's make today count!</b>\n                </p>\n            </div>\n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    This is your daily boost from DARKSULFOCUS. You got this!\n                </p>\n            </div>\n        </div>\n        '''\n        return EmailService._send_email(msg)\n    \"\"\"Comprehensive email service for DARKSULFOCUS\"\"\"\n    \n    @staticmethod\n    def get_email_template_base():\n        \"\"\"Base template structure for all emails\"\"\"\n        return {\n            'header_style': \"background: linear-gradient(135deg, #1a1a1a, #2d2d2d); padding: 30px; text-align: center;\",\n            'body_style': \"background: #f8f9fa; padding: 30px;\",\n            'footer_style': \"background: #1a1a1a; padding: 20px; text-align: center;\",\n            'button_style': \"background: #00ff88; color: #1a1a1a; padding: 12px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block;\",\n            'brand_color': \"#00ff88\",\n            'text_color': \"#666\",\n            'heading_color': \"#333\"\n        }\n    \n    @staticmethod\n    def send_verification_email(user):\n        \"\"\"Send email verification to user\"\"\"\n        template = EmailService.get_email_template_base()\n        token = user.verification_token\n        \n        msg = Message(\n            'Verify Your DARKSULFOCUS Account',\n            recipients=[user.email]\n        )\n        \n        verify_url = url_for('main.verify_email', token=token, _external=True)\n        \n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"{template['header_style']}\">\n                <h1 style=\"color: {template['brand_color']}; margin: 0;\">DARKSULFOCUS</h1>\n                <p style=\"color: #cccccc; margin: 10px 0 0 0;\">Gamified Study Platform</p>\n            </div>\n            \n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: {template['heading_color']}; margin-top: 0;\">Welcome to DARKSULFOCUS!</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6;\">\n                    Thank you for joining our gamified study platform. To start your journey and access all features, \n                    please verify your email address by clicking the button below.\n                </p>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{verify_url}\" style=\"{template['button_style']}\">\n                        Verify Email Address\n                    </a>\n                </div>\n                \n                <p style=\"color: {template['text_color']}; font-size: 14px;\">\n                    If the button doesn't work, copy and paste this link into your browser:<br>\n                    <a href=\"{verify_url}\" style=\"color: {template['brand_color']};\">{verify_url}</a>\n                </p>\n            </div>\n            \n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    If you didn't create this account, please ignore this email.\n                </p>\n            </div>\n        </div>\n        '''\n        \n        return EmailService._send_email(msg)\n\n    @staticmethod\n    def send_reset_email(user):\n        \"\"\"Send password reset email to user\"\"\"\n        template = EmailService.get_email_template_base()\n        token = user.reset_token\n        \n        msg = Message(\n            'Reset Your DARKSULFOCUS Password',\n            recipients=[user.email]\n        )\n        \n        reset_url = url_for('main.reset_password', token=token, _external=True)\n        \n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"{template['header_style']}\">\n                <h1 style=\"color: {template['brand_color']}; margin: 0;\">DARKSULFOCUS</h1>\n                <p style=\"color: #cccccc; margin: 10px 0 0 0;\">Password Reset Request</p>\n            </div>\n            \n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: {template['heading_color']}; margin-top: 0;\">Reset Your Password</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6;\">\n                    We received a request to reset your password for your DARKSULFOCUS account. \n                    Click the button below to set a new password.\n                </p>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{reset_url}\" style=\"{template['button_style']}\">\n                        Reset Password\n                    </a>\n                </div>\n                \n                <p style=\"color: {template['text_color']}; font-size: 14px;\">\n                    This link will expire in 1 hour. If the button doesn't work, copy and paste this link:<br>\n                    <a href=\"{reset_url}\" style=\"color: {template['brand_color']};\">{reset_url}</a>\n                </p>\n            </div>\n            \n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    If you didn't request this reset, please ignore this email.\n                </p>\n            </div>\n        </div>\n        '''\n        \n        return EmailService._send_email(msg)\n\n    @staticmethod\n    def send_daily_reminder(user):\n        \"\"\"Send daily study reminder if user hasn't studied today\"\"\"\n        template = EmailService.get_email_template_base()\n        ist = pytz.timezone('Asia/Kolkata')\n        today = datetime.now(ist).date()\n        \n        # Check if user has studied today\n        daily_stat = DailyStats.query.filter_by(user_id=user.id, date=today).first()\n        if daily_stat and daily_stat.minutes_studied > 0:\n            return True  # User already studied today\n        \n        msg = Message(\n            f'Your {user.current_streak}-day streak is waiting! 📚',\n            recipients=[user.email]\n        )\n        \n        dashboard_url = url_for('main.home', _external=True)\n        \n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"{template['header_style']}\">\n                <h1 style=\"color: {template['brand_color']}; margin: 0;\">DARKSULFOCUS</h1>\n                <p style=\"color: #cccccc; margin: 10px 0 0 0;\">Daily Study Reminder</p>\n            </div>\n            \n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: {template['heading_color']}; margin-top: 0;\">Don't Break Your Streak!</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6;\">\n                    Hi {user.username}, you're on a <strong>{user.current_streak}-day study streak</strong>! \n                    Don't let it slip away - even a quick 15-minute study session can keep your momentum going.\n                </p>\n                \n                <div style=\"background: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                    <h3 style=\"color: {template['brand_color']}; margin: 0 0 10px 0;\">Your Stats:</h3>\n                    <p style=\"margin: 5px 0; color: {template['text_color']};\">🔥 Current Streak: {user.current_streak} days</p>\n                    <p style=\"margin: 5px 0; color: {template['text_color']};\">⭐ Total Points: {user.total_points:.1f}</p>\n                    <p style=\"margin: 5px 0; color: {template['text_color']};\">🏆 Rank: {user.get_rank()}</p>\n                </div>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{dashboard_url}\" style=\"{template['button_style']}\">\n                        Start Studying Now\n                    </a>\n                </div>\n                \n                <p style=\"color: {template['text_color']}; font-size: 14px; text-align: center;\">\n                    Quick tip: Start with a 25-minute Pomodoro session!\n                </p>\n            </div>\n            \n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    You can adjust your notification preferences in your profile settings.\n                </p>\n            </div>\n        </div>\n        '''\n        \n        return EmailService._send_email(msg)\n\n    @staticmethod\n    def send_streak_warning(user):\n        \"\"\"Send warning when user is about to lose streak\"\"\"\n        template = EmailService.get_email_template_base()\n        \n        msg = Message(\n            f'🚨 Your {user.current_streak}-day streak expires today!',\n            recipients=[user.email]\n        )\n        \n        dashboard_url = url_for('main.home', _external=True)\n        \n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"background: linear-gradient(135deg, #ff4444, #cc0000); padding: 30px; text-align: center;\">\n                <h1 style=\"color: white; margin: 0;\">⚠️ STREAK ALERT!</h1>\n                <p style=\"color: #ffcccc; margin: 10px 0 0 0;\">DARKSULFOCUS</p>\n            </div>\n            \n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: #cc0000; margin-top: 0;\">Don't Lose Your {user.current_streak}-Day Streak!</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6;\">\n                    <strong>{user.username}</strong>, your study streak expires at midnight today! You've worked hard for \n                    <strong>{user.current_streak} days</strong> - don't let it go to waste.\n                </p>\n                \n                <div style=\"background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                    <h3 style=\"color: #856404; margin: 0 0 10px 0;\">Quick Study Ideas (10-30 minutes):</h3>\n                    <ul style=\"color: #856404; margin: 0; padding-left: 20px;\">\n                        <li>Review flashcards or notes</li>\n                        <li>Watch an educational video</li>\n                        <li>Read one chapter or article</li>\n                        <li>Practice problems or exercises</li>\n                        <li>Plan tomorrow's study session</li>\n                    </ul>\n                </div>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{dashboard_url}\" style=\"background: #ff4444; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block;\">\n                        Save My Streak!\n                    </a>\n                </div>\n            </div>\n            \n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    This is an urgent reminder. Study at least 5 minutes before midnight to maintain your streak.\n                </p>\n            </div>\n        </div>\n        '''\n        \n        return EmailService._send_email(msg)\n\n    @staticmethod\n    def send_weekly_progress(user):\n        \"\"\"Send weekly progress summary\"\"\"\n        from app import db\n        from models import DailyStats\n        \n        template = EmailService.get_email_template_base()\n        ist = pytz.timezone('Asia/Kolkata')\n        week_start = datetime.now(ist).date() - timedelta(days=7)\n        week_end = datetime.now(ist).date()\n        \n        # Get weekly stats\n        weekly_stats = db.session.query(DailyStats).filter(\n            DailyStats.user_id == user.id,\n            DailyStats.date >= week_start,\n            DailyStats.date < week_end\n        ).all()\n        \n        total_minutes = sum(stat.minutes_studied for stat in weekly_stats)\n        total_points = sum(stat.points_earned for stat in weekly_stats)\n        total_tasks = sum(stat.tasks_completed for stat in weekly_stats)\n        study_days = len([stat for stat in weekly_stats if stat.minutes_studied > 0])\n        \n        msg = Message(\n            f'Your Weekly Progress Summary - {total_minutes//60}h {total_minutes%60}m studied!',\n            recipients=[user.email]\n        )\n        \n        dashboard_url = url_for('main.progress', _external=True)\n        \n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"{template['header_style']}\">\n                <h1 style=\"color: {template['brand_color']}; margin: 0;\">DARKSULFOCUS</h1>\n                <p style=\"color: #cccccc; margin: 10px 0 0 0;\">Weekly Progress Report</p>\n            </div>\n            \n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: {template['heading_color']}; margin-top: 0;\">Great Work This Week, {user.username}!</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6;\">\n                    Here's a summary of your study achievements from the past 7 days:\n                </p>\n                \n                <div style=\"background: linear-gradient(135deg, #e8f5e8, #d4f1d4); padding: 25px; border-radius: 10px; margin: 20px 0;\">\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px;\">\n                        <div style=\"text-align: center;\">\n                            <h3 style=\"color: {template['brand_color']}; margin: 0; font-size: 2em;\">{total_minutes//60}h {total_minutes%60}m</h3>\n                            <p style=\"margin: 5px 0; color: {template['text_color']};\">Study Time</p>\n                        </div>\n                        <div style=\"text-align: center;\">\n                            <h3 style=\"color: {template['brand_color']}; margin: 0; font-size: 2em;\">{total_points:.1f}</h3>\n                            <p style=\"margin: 5px 0; color: {template['text_color']};\">Points Earned</p>\n                        </div>\n                        <div style=\"text-align: center;\">\n                            <h3 style=\"color: {template['brand_color']}; margin: 0; font-size: 2em;\">{total_tasks}</h3>\n                            <p style=\"margin: 5px 0; color: {template['text_color']};\">Tasks Completed</p>\n                        </div>\n                        <div style=\"text-align: center;\">\n                            <h3 style=\"color: {template['brand_color']}; margin: 0; font-size: 2em;\">{study_days}/7</h3>\n                            <p style=\"margin: 5px 0; color: {template['text_color']};\">Study Days</p>\n                        </div>\n                    </div>\n                </div>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{dashboard_url}\" style=\"{template['button_style']}\">\n                        View Detailed Progress\n                    </a>\n                </div>\n                \n                <p style=\"color: {template['text_color']}; font-size: 14px; text-align: center;\">\n                    Keep up the momentum! Consistency is the key to success.\n                </p>\n            </div>\n            \n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    Weekly reports are sent every Sunday. Manage your email preferences in settings.\n                </p>\n            </div>\n        </div>\n        '''\n        \n        return EmailService._send_email(msg)\n\n    @staticmethod\n    def send_achievement_unlock(user, achievement_type, achievement_data):\n        \"\"\"Send achievement unlock notification\"\"\"\n        template = EmailService.get_email_template_base()\n        \n        achievements = {\n            'rank_up': {\n                'title': f'Rank Up! You\\'re now {achievement_data[\"new_rank\"]}!',\n                'message': f'Congratulations! You\\'ve advanced from {achievement_data[\"old_rank\"]} to {achievement_data[\"new_rank\"]}!',\n                'icon': '🏆'\n            },\n            'streak_milestone': {\n                'title': f'{achievement_data[\"days\"]}-Day Streak Achievement!',\n                'message': f'Amazing! You\\'ve maintained a {achievement_data[\"days\"]}-day study streak!',\n                'icon': '🔥'\n            },\n            'points_milestone': {\n                'title': f'{achievement_data[\"points\"]} Points Milestone!',\n                'message': f'Incredible! You\\'ve earned your {achievement_data[\"points\"]}th point!',\n                'icon': '⭐'\n            },\n            'hours_milestone': {\n                'title': f'{achievement_data[\"hours\"]} Hours Studied!',\n                'message': f'Wow! You\\'ve studied for {achievement_data[\"hours\"]} total hours!',\n                'icon': '📚'\n            }\n        }\n        \n        achievement = achievements.get(achievement_type, achievements['points_milestone'])\n        \n        msg = Message(\n            f'{achievement[\"icon\"]} {achievement[\"title\"]}',\n            recipients=[user.email]\n        )\n        \n        dashboard_url = url_for('main.home', _external=True)\n        \n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"background: linear-gradient(135deg, #ffd700, #ffed4e); padding: 30px; text-align: center;\">\n                <h1 style=\"color: #1a1a1a; margin: 0; font-size: 3em;\">{achievement[\"icon\"]}</h1>\n                <h2 style=\"color: #1a1a1a; margin: 10px 0 0 0;\">ACHIEVEMENT UNLOCKED!</h2>\n                <p style=\"color: #333; margin: 5px 0 0 0;\">DARKSULFOCUS</p>\n            </div>\n            \n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: {template['heading_color']}; margin-top: 0; text-align: center;\">{achievement[\"title\"]}</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6; text-align: center; font-size: 18px;\">\n                    {achievement[\"message\"]}\n                </p>\n                \n                <div style=\"background: linear-gradient(135deg, #fff9e6, #fff3b8); padding: 25px; border-radius: 10px; margin: 30px 0; text-align: center;\">\n                    <h3 style=\"color: #b8860b; margin: 0 0 15px 0;\">Your Current Stats:</h3>\n                    <p style=\"margin: 5px 0; color: #b8860b;\">🏆 Rank: {user.get_rank()}</p>\n                    <p style=\"margin: 5px 0; color: #b8860b;\">⭐ Total Points: {user.total_points:.1f}</p>\n                    <p style=\"margin: 5px 0; color: #b8860b;\">🔥 Current Streak: {user.current_streak} days</p>\n                    <p style=\"margin: 5px 0; color: #b8860b;\">📚 Total Study Time: {user.total_study_time//60}h {user.total_study_time%60}m</p>\n                </div>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{dashboard_url}\" style=\"background: #ffd700; color: #1a1a1a; padding: 15px 35px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block; font-size: 16px;\">\n                        Continue Your Journey\n                    </a>\n                </div>\n                \n                <p style=\"color: {template['text_color']}; font-size: 14px; text-align: center;\">\n                    Keep pushing your limits! The next achievement is waiting for you.\n                </p>\n            </div>\n            \n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    Achievement notifications help you celebrate your progress. Manage preferences in settings.\n                </p>\n            </div>\n        </div>\n        '''\n        \n        return EmailService._send_email(msg)\n\n    @staticmethod\n    def send_challenge_notification(challenged_user, challenger_user, challenge):\n        \"\"\"Send challenge notification\"\"\"\n        template = EmailService.get_email_template_base()\n        \n        msg = Message(\n            f'{challenger_user.username} challenged you to a study competition!',\n            recipients=[challenged_user.email]\n        )\n        \n        challenge_url = url_for('main.competition', _external=True)\n        \n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"background: linear-gradient(135deg, #ff6b35, #ff8c42); padding: 30px; text-align: center;\">\n                <h1 style=\"color: white; margin: 0; font-size: 2.5em;\">⚔️</h1>\n                <h2 style=\"color: white; margin: 10px 0 0 0;\">CHALLENGE RECEIVED!</h2>\n                <p style=\"color: #ffe8e1; margin: 5px 0 0 0;\">DARKSULFOCUS</p>\n            </div>\n            \n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: {template['heading_color']}; margin-top: 0;\">You've Been Challenged!</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6;\">\n                    <strong>{challenger_user.username}</strong> has challenged you to a {challenge.duration_days}-day study competition! \n                    Are you ready to prove your dedication?\n                </p>\n                \n                <div style=\"background: #f8f1ff; border: 2px solid #9c88ff; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n                    <h3 style=\"color: #6c5ce7; margin: 0 0 15px 0;\">Challenge Details:</h3>\n                    <p style=\"margin: 5px 0; color: #6c5ce7;\">⏱️ Duration: {challenge.duration_days} days</p>\n                    <p style=\"margin: 5px 0; color: #6c5ce7;\">🎯 Goal: Study more minutes than your opponent</p>\n                    <p style=\"margin: 5px 0; color: #6c5ce7;\">🏆 Winner takes all the glory!</p>\n                </div>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{url_for('main.accept_challenge', challenge_id=challenge.id, _external=True)}\" style=\"background: #00cc6a; color: white; padding: 15px 25px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block; font-size: 16px; margin: 0 10px;\">\n                        Accept Challenge\n                    </a>\n                    <a href=\"{url_for('main.decline_challenge', challenge_id=challenge.id, _external=True)}\" style=\"background: #ff6b6b; color: white; padding: 15px 25px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block; font-size: 16px; margin: 0 10px;\">\n                        Decline Challenge\n                    </a>\n                </div>\n                \n                <p style=\"color: {template['text_color']}; font-size: 14px; text-align: center;\">\n                    Don't keep them waiting! Accept or decline in your competition dashboard.\n                </p>\n            </div>\n            \n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    Challenge notifications keep the competition exciting. Manage preferences in settings.\n                </p>\n            </div>\n        </div>\n        '''\n        \n        return EmailService._send_email(msg)\n\n    @staticmethod\n    def send_challenge_accepted(challenger_user, accepted_user, challenge):\n        \"\"\"Send challenge acceptance notification to challenger\"\"\"\n        template = EmailService.get_email_template_base()\n        \n        msg = Message(\n            f'{accepted_user.username} accepted your challenge!',\n            recipients=[challenger_user.email]\n        )\n        \n        dashboard_url = url_for('main.competition', _external=True)\n        \n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"background: linear-gradient(135deg, #00ff88, #00cc6a); padding: 30px; text-align: center;\">\n                <h1 style=\"color: white; margin: 0; font-size: 2.5em;\">✅</h1>\n                <h2 style=\"color: white; margin: 10px 0 0 0;\">CHALLENGE ACCEPTED!</h2>\n                <p style=\"color: #e8f5e8; margin: 5px 0 0 0;\">DARKSULFOCUS</p>\n            </div>\n            \n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: {template['heading_color']}; margin-top: 0;\">The Competition Begins!</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6;\">\n                    Great news! <strong>{accepted_user.username}</strong> has accepted your {challenge.duration_days}-day challenge. \n                    The competition is now active!\n                </p>\n                \n                <div style=\"background: #e8f5e8; border: 2px solid #00cc6a; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n                    <h3 style=\"color: #00cc6a; margin: 0 0 15px 0;\">Competition Details:</h3>\n                    <p style=\"margin: 5px 0; color: #00cc6a;\">⏰ Duration: {challenge.duration_days} days</p>\n                    <p style=\"margin: 5px 0; color: #00cc6a;\">🎯 Goal: Study more than your opponent</p>\n                    <p style=\"margin: 5px 0; color: #00cc6a;\">🚀 Status: Active - start studying!</p>\n                </div>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{dashboard_url}\" style=\"background: #00cc6a; color: white; padding: 15px 35px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block; font-size: 16px;\">\n                        View Competition\n                    </a>\n                </div>\n                \n                <p style=\"color: {template['text_color']}; font-size: 14px; text-align: center;\">\n                    May the best studier win! Track your progress and see live results.\n                </p>\n            </div>\n            \n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    Good luck with your challenge! Competition makes us stronger.\n                </p>\n            </div>\n        </div>\n        '''\n        \n        return EmailService._send_email(msg)\n\n    @staticmethod\n    def send_challenge_declined(challenger_user, declined_user, challenge):\n        \"\"\"Send challenge decline notification to challenger\"\"\"\n        template = EmailService.get_email_template_base()\n        \n        msg = Message(\n            f'{declined_user.username} declined your challenge',\n            recipients=[challenger_user.email]\n        )\n        \n        dashboard_url = url_for('main.competition', _external=True)\n        \n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"background: linear-gradient(135deg, #74b9ff, #0984e3); padding: 30px; text-align: center;\">\n                <h1 style=\"color: white; margin: 0; font-size: 2.5em;\">❌</h1>\n                <h2 style=\"color: white; margin: 10px 0 0 0;\">CHALLENGE DECLINED</h2>\n                <p style=\"color: #ddeeff; margin: 5px 0 0 0;\">DARKSULFOCUS</p>\n            </div>\n            \n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: {template['heading_color']}; margin-top: 0;\">Challenge Not Accepted</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6;\">\n                    <strong>{declined_user.username}</strong> has declined your {challenge.duration_days}-day challenge. \n                    Don't worry - there are many other competitors eager to test their skills!\n                </p>\n                \n                <div style=\"background: #f0f7ff; border: 2px solid #74b9ff; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n                    <h3 style=\"color: #0984e3; margin: 0 0 15px 0;\">What's Next?</h3>\n                    <p style=\"margin: 5px 0; color: #0984e3;\">🎯 Challenge another user</p>\n                    <p style=\"margin: 5px 0; color: #0984e3;\">📚 Focus on your personal study goals</p>\n                    <p style=\"margin: 5px 0; color: #0984e3;\">🏆 Check the leaderboard for inspiration</p>\n                </div>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{dashboard_url}\" style=\"background: #0984e3; color: white; padding: 15px 35px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block; font-size: 16px;\">\n                        Find New Challenger\n                    </a>\n                </div>\n                \n                <p style=\"color: {template['text_color']}; font-size: 14px; text-align: center;\">\n                    Keep challenging yourself - that's how legends are made!\n                </p>\n            </div>\n            \n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    The competition never stops. Ready for your next challenge?\n                </p>\n            </div>\n        </div>\n        '''\n        \n        return EmailService._send_email(msg)\n\n    @staticmethod\n    def send_challenge_result(user, challenge, is_winner):\n        \"\"\"Send challenge result notification\"\"\"\n        template = EmailService.get_email_template_base()\n        \n        if is_winner:\n            subject = f'🏆 You won the challenge against {challenge.challenger.username if user.id == challenge.challenged_id else challenge.challenged.username}!'\n            header_bg = \"background: linear-gradient(135deg, #00ff88, #00cc6a);\"\n            result_text = \"Congratulations! You won!\"\n            result_color = \"#00cc6a\"\n        else:\n            subject = f'Good fight! Challenge results with {challenge.challenger.username if user.id == challenge.challenged_id else challenge.challenged.username}'\n            header_bg = \"background: linear-gradient(135deg, #74b9ff, #0984e3);\"\n            result_text = \"Great effort! Keep pushing!\"\n            result_color = \"#0984e3\"\n        \n        msg = Message(subject, recipients=[user.email])\n        \n        dashboard_url = url_for('main.competition', _external=True)\n        \n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"{header_bg} padding: 30px; text-align: center;\">\n                <h1 style=\"color: white; margin: 0; font-size: 2.5em;\">{'🏆' if is_winner else '🤝'}</h1>\n                <h2 style=\"color: white; margin: 10px 0 0 0;\">CHALLENGE COMPLETE!</h2>\n                <p style=\"color: rgba(255,255,255,0.8); margin: 5px 0 0 0;\">DARKSULFOCUS</p>\n            </div>\n            \n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: {result_color}; margin-top: 0; text-align: center;\">{result_text}</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6; text-align: center;\">\n                    Your {challenge.duration_days}-day challenge has ended. Here are the final results:\n                </p>\n                \n                <div style=\"background: #f8f9ff; border: 2px solid {result_color}; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n                    <h3 style=\"color: {result_color}; margin: 0 0 15px 0; text-align: center;\">Final Scores:</h3>\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; text-align: center;\">\n                        <div>\n                            <h4 style=\"margin: 0; color: {template['text_color']};\">{challenge.challenger.username}</h4>\n                            <p style=\"font-size: 24px; font-weight: bold; margin: 5px 0; color: {result_color};\">{challenge.challenger_points:.1f} pts</p>\n                        </div>\n                        <div>\n                            <h4 style=\"margin: 0; color: {template['text_color']};\">{challenge.challenged.username}</h4>\n                            <p style=\"font-size: 24px; font-weight: bold; margin: 5px 0; color: {result_color};\">{challenge.challenged_points:.1f} pts</p>\n                        </div>\n                    </div>\n                </div>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{dashboard_url}\" style=\"background: {result_color}; color: white; padding: 15px 35px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block;\">\n                        View Competition Dashboard\n                    </a>\n                </div>\n                \n                <p style=\"color: {template['text_color']}; font-size: 14px; text-align: center;\">\n                    {'Ready for your next challenge?' if is_winner else 'Every challenge makes you stronger!'}\n                </p>\n            </div>\n            \n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    Competition drives excellence. Keep challenging yourself and others!\n                </p>\n            </div>\n        </div>\n        '''\n        \n        return EmailService._send_email(msg)\n\n    @staticmethod\n    def send_welcome_series_day1(user):\n        \"\"\"Send welcome series - Day 1: Getting started\"\"\"\n        template = EmailService.get_email_template_base()\n        \n        msg = Message(\n            'Welcome to DARKSULFOCUS! Your study journey begins now 🚀',\n            recipients=[user.email]\n        )\n        \n        dashboard_url = url_for('main.home', _external=True)\n        help_url = url_for('main.help', _external=True)\n        \n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"{template['header_style']}\">\n                <h1 style=\"color: {template['brand_color']}; margin: 0;\">DARKSULFOCUS</h1>\n                <p style=\"color: #cccccc; margin: 10px 0 0 0;\">Welcome Series - Day 1</p>\n            </div>\n            \n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: {template['heading_color']}; margin-top: 0;\">Welcome aboard, {user.username}! 🎉</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6;\">\n                    You've just joined a community of focused learners who are serious about their study goals. \n                    Let's get you started on your journey to deep focus mastery!\n                </p>\n                \n                <div style=\"background: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                    <h3 style=\"color: {template['brand_color']}; margin: 0 0 15px 0;\">Quick Start Guide:</h3>\n                    <ol style=\"color: {template['text_color']}; margin: 0; padding-left: 20px;\">\n                        <li style=\"margin: 10px 0;\">Create your first study task</li>\n                        <li style=\"margin: 10px 0;\">Start the timer and focus deeply</li>\n                        <li style=\"margin: 10px 0;\">Earn points and build your streak</li>\n                        <li style=\"margin: 10px 0;\">Track your progress and rank up</li>\n                    </ol>\n                </div>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{dashboard_url}\" style=\"{template['button_style']}; margin: 0 10px 10px 0;\">\n                        Start Your First Task\n                    </a>\n                    <a href=\"{help_url}\" style=\"background: transparent; color: {template['brand_color']}; border: 2px solid {template['brand_color']}; padding: 10px 28px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block;\">\n                        Learn More\n                    </a>\n                </div>\n                \n                <p style=\"color: {template['text_color']}; font-size: 14px; text-align: center;\">\n                    Tomorrow: We'll show you how to set effective study goals!\n                </p>\n            </div>\n            \n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    This is part 1 of our 3-part welcome series to help you succeed.\n                </p>\n            </div>\n        </div>\n        '''\n        \n        return EmailService._send_email(msg)\n\n    @staticmethod\n    def send_reengagement_email(user):\n        \"\"\"Send re-engagement email for inactive users\"\"\"\n        template = EmailService.get_email_template_base()\n        \n        msg = Message(\n            f'We miss you, {user.username}! Your study streak is waiting ❤️',\n            recipients=[user.email]\n        )\n        \n        dashboard_url = url_for('main.home', _external=True)\n        \n        msg.html = f'''\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"{template['header_style']}\">\n                <h1 style=\"color: {template['brand_color']}; margin: 0;\">DARKSULFOCUS</h1>\n                <p style=\"color: #cccccc; margin: 10px 0 0 0;\">We Miss You!</p>\n            </div>\n            \n            <div style=\"{template['body_style']}\">\n                <h2 style=\"color: {template['heading_color']}; margin-top: 0;\">Come back, {user.username}! 👋</h2>\n                <p style=\"color: {template['text_color']}; line-height: 1.6;\">\n                    It's been a while since your last study session, and we wanted to remind you that your \n                    goals are still waiting for you. Every expert was once a beginner who never gave up.\n                </p>\n                \n                <div style=\"background: linear-gradient(135deg, #ffe8e8, #ffd6d6); padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                    <h3 style=\"color: #cc4444; margin: 0 0 15px 0;\">Your Account Summary:</h3>\n                    <p style=\"margin: 5px 0; color: #cc4444;\">🏆 Rank: {user.get_rank()}</p>\n                    <p style=\"margin: 5px 0; color: #cc4444;\">⭐ Total Points: {user.total_points:.1f}</p>\n                    <p style=\"margin: 5px 0; color: #cc4444;\">📚 Total Study Time: {user.total_study_time//60}h {user.total_study_time%60}m</p>\n                    <p style=\"margin: 5px 0; color: #cc4444;\">💪 Ready to restart your streak!</p>\n                </div>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{dashboard_url}\" style=\"{template['button_style']}\">\n                        Welcome Back - Start Studying\n                    </a>\n                </div>\n                \n                <p style=\"color: {template['text_color']}; font-size: 14px; text-align: center;\">\n                    Small steps lead to big achievements. Start with just 15 minutes today!\n                </p>\n            </div>\n            \n            <div style=\"{template['footer_style']}\">\n                <p style=\"color: #888; margin: 0; font-size: 12px;\">\n                    We believe in your potential. Your future self will thank you for restarting today.\n                </p>\n            </div>\n        </div>\n        '''\n        \n        return EmailService._send_email(msg)\n\n    @staticmethod\n    def _send_email(msg):\n        \"\"\"Helper method to send email with error handling\"\"\"\n        try:\n            from app import mail\n            mail.send(msg)\n            current_app.logger.info(f'Email sent successfully to {msg.recipients}')\n            return True\n        except Exception as e:\n            current_app.logger.error(f'Failed to send email: {e}')\n            return False","size_bytes":41057},"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField, FileAllowed\nfrom wtforms import StringField, PasswordField, EmailField, IntegerField, SelectField, BooleanField, TextAreaField\nfrom wtforms.validators import DataRequired, Length, Email, EqualTo, NumberRange, ValidationError\nfrom models import User\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=3, max=64)])\n    email = EmailField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    remember_me = BooleanField('Remember Me')\n\nclass RegisterForm(FlaskForm):\n    username = StringField('Username', validators=[\n        DataRequired(), \n        Length(min=3, max=64, message=\"Username must be between 3 and 64 characters\")\n    ])\n    email = EmailField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[\n        DataRequired(), \n        Length(min=8, message=\"Password must be at least 8 characters long\")\n    ])\n    confirm_password = PasswordField('Confirm Password', validators=[\n        DataRequired(), \n        EqualTo('password', message=\"Passwords must match\")\n    ])\n    \n    def validate_username(self, username):\n        user = User.query.filter_by(username=username.data).first()\n        if user:\n            raise ValidationError('Username already taken. Please choose a different one.')\n    \n    def validate_email(self, email):\n        user = User.query.filter_by(email=email.data).first()\n        if user:\n            raise ValidationError('Email already registered. Please use a different email.')\n\nclass ProfileForm(FlaskForm):\n    username = StringField('Username', validators=[\n        DataRequired(), \n        Length(min=3, max=64)\n    ])\n    email = EmailField('Email', validators=[DataRequired(), Email()])\n    current_password = PasswordField('Current Password')\n    new_password = PasswordField('New Password', validators=[\n        Length(min=8, message=\"Password must be at least 8 characters long\")\n    ])\n    confirm_password = PasswordField('Confirm New Password', validators=[\n        EqualTo('new_password', message=\"Passwords must match\")\n    ])\n    profile_image = FileField('Profile Image', validators=[\n        FileAllowed(['jpg', 'jpeg', 'png', 'gif'], 'Images only!')\n    ])\n    \n    def __init__(self, current_user, *args, **kwargs):\n        super(ProfileForm, self).__init__(*args, **kwargs)\n        self.current_user = current_user\n    \n    def validate_username(self, username):\n        if username.data != self.current_user.username:\n            user = User.query.filter_by(username=username.data).first()\n            if user:\n                raise ValidationError('Username already taken.')\n    \n    def validate_email(self, email):\n        if email.data != self.current_user.email:\n            user = User.query.filter_by(email=email.data).first()\n            if user:\n                raise ValidationError('Email already registered.')\n\nclass TaskForm(FlaskForm):\n    title = StringField('Task Title', validators=[\n        DataRequired(), \n        Length(min=1, max=200, message=\"Title must be between 1 and 200 characters\")\n    ])\n    duration_minutes = IntegerField('Duration (minutes)', validators=[\n        DataRequired(), \n        NumberRange(min=1, max=720, message=\"Duration must be between 1 and 720 minutes (12 hours)\")\n    ])\n\nclass ChallengeForm(FlaskForm):\n    opponent_username = StringField('Opponent Username', validators=[\n        DataRequired(), \n        Length(min=3, max=64)\n    ])\n    duration_days = SelectField('Duration', choices=[\n        (2, '2 Days'),\n        (7, '7 Days')\n    ], coerce=int, validators=[DataRequired()])\n    \n    def validate_opponent_username(self, opponent_username):\n        user = User.query.filter_by(username=opponent_username.data).first()\n        if not user:\n            raise ValidationError('User not found.')\n\nclass ForgotPasswordForm(FlaskForm):\n    email = EmailField('Email', validators=[DataRequired(), Email()])\n\nclass ResetPasswordForm(FlaskForm):\n    password = PasswordField('New Password', validators=[\n        DataRequired(), \n        Length(min=8, message=\"Password must be at least 8 characters long\")\n    ])\n    confirm_password = PasswordField('Confirm Password', validators=[\n        DataRequired(), \n        EqualTo('password', message=\"Passwords must match\")\n    ])\n","size_bytes":4429},"main.py":{"content":"from app import create_app\n\napp = create_app()\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":126},"models.py":{"content":"from datetime import datetime, timedelta\nfrom app import db\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nimport pytz\n\nclass User(UserMixin, db.Model):\n    last_active = db.Column(db.DateTime)\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False, index=True)\n    email = db.Column(db.String(120), unique=True, nullable=False, index=True)\n    password_hash = db.Column(db.String(256), nullable=False)\n    profile_image = db.Column(db.String(200), default='default.png')\n    total_points = db.Column(db.Float, default=0.0)\n    current_streak = db.Column(db.Integer, default=0)\n    max_streak = db.Column(db.Integer, default=0)\n    last_study_date = db.Column(db.Date)\n    grace_days_used = db.Column(db.Integer, default=0)\n    total_study_time = db.Column(db.Integer, default=0)  # in minutes\n    is_verified = db.Column(db.Boolean, default=False)\n    verification_token = db.Column(db.String(100))\n    reset_token = db.Column(db.String(100))\n    reset_token_expires = db.Column(db.DateTime)\n    joined_date = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Email preferences\n    email_notifications = db.Column(db.Boolean, default=True)\n    daily_reminders = db.Column(db.Boolean, default=True)\n    weekly_summaries = db.Column(db.Boolean, default=True)\n    achievement_emails = db.Column(db.Boolean, default=True)\n    challenge_emails = db.Column(db.Boolean, default=True)\n    \n    # Relationships\n    tasks = db.relationship('Task', backref='user', lazy=True, cascade='all, delete-orphan')\n    sent_challenges = db.relationship('Challenge', foreign_keys='Challenge.challenger_id', backref='challenger', lazy=True)\n    received_challenges = db.relationship('Challenge', foreign_keys='Challenge.challenged_id', backref='challenged', lazy=True)\n    daily_stats = db.relationship('DailyStats', backref='user', lazy=True, cascade='all, delete-orphan')\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    \n    def get_rank(self):\n        points = self.total_points\n        if points < 101:\n            return \"Dormant\"\n        elif points < 301:\n            return \"Initiate\"\n        elif points < 601:\n            return \"Grinder\"\n        elif points < 1001:\n            return \"Executor\"\n        elif points < 1501:\n            return \"Obsessor\"\n        elif points < 2001:\n            return \"Disciplinar\"\n        elif points < 2601:\n            return \"Sentinel\"\n        elif points < 3301:\n            return \"Dominus\"\n        elif points < 4001:\n            return \"Phantom\"\n        elif points < 4701:\n            return \"Apex Mind\"\n        elif points < 5501:\n            return \"System Override\"\n        else:\n            return \"Darkensul Core\"\n    \n    def get_rank_progress(self):\n        points = self.total_points\n        thresholds = [101, 301, 601, 1001, 1501, 2001, 2601, 3301, 4001, 4701, 5501]\n        \n        for i, threshold in enumerate(thresholds):\n            if points < threshold:\n                prev_threshold = thresholds[i-1] if i > 0 else 0\n                progress = points - prev_threshold\n                total = threshold - prev_threshold\n                return f\"Progress: {progress:.0f} / {total} points\"\n        \n        return f\"Progress: {points:.0f} / ∞ points\"\n    \n    def update_streak(self, study_minutes_today):\n        ist = pytz.timezone('Asia/Kolkata')\n        today = datetime.now(ist).date()\n\n        if not hasattr(self, 'grace_days_used') or self.grace_days_used is None:\n            self.grace_days_used = 0\n        if not hasattr(self, 'last_missed_date'):\n            self.last_missed_date = None\n\n        if study_minutes_today >= 120:  # 2 hours = 120 minutes\n            if self.last_study_date:\n                days_diff = (today - self.last_study_date).days\n\n                if days_diff == 1:  # Consecutive day\n                    self.current_streak += 1\n                    self.last_missed_date = None\n                elif days_diff == 2:\n                    # Missed one day\n                    if self.last_missed_date == self.last_study_date:  # Consecutive miss\n                        self.current_streak = 1\n                        self.grace_days_used = 0\n                        self.last_missed_date = None\n                    elif self.grace_days_used < 5:\n                        self.current_streak += 1\n                        self.grace_days_used += 1\n                        self.last_missed_date = self.last_study_date + timedelta(days=1)\n                    else:\n                        self.current_streak = 1\n                        self.grace_days_used = 0\n                        self.last_missed_date = None\n                elif days_diff > 2:\n                    self.current_streak = 1\n                    self.grace_days_used = 0\n                    self.last_missed_date = None\n                # Same day doesn't change streak\n            else:\n                self.current_streak = 1\n                self.grace_days_used = 0\n                self.last_missed_date = None\n\n            self.last_study_date = today\n            if self.current_streak > self.max_streak:\n                self.max_streak = self.current_streak\n\nclass Task(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    title = db.Column(db.String(200), nullable=False)\n    duration_minutes = db.Column(db.Integer, nullable=False)\n    is_completed = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    completed_at = db.Column(db.DateTime)\n    \n    # Server-side timer tracking for true background timers\n    started_at = db.Column(db.DateTime)\n    expected_completion = db.Column(db.DateTime)  # When timer should complete\n    is_active = db.Column(db.Boolean, default=False)  # Is timer currently running\n    \n    def get_time_display(self):\n        total_seconds = self.duration_minutes * 60\n        hours = int(total_seconds // 3600)\n        minutes = int((total_seconds % 3600) // 60)\n        seconds = int(total_seconds % 60)\n        return f\"{hours:02d}:{minutes:02d}:{seconds:02d}\"\n    \n    def start_timer(self):\n        \"\"\"Start the server-side timer\"\"\"\n        self.is_active = True\n        self.started_at = datetime.utcnow()\n        self.expected_completion = datetime.utcnow() + timedelta(minutes=self.duration_minutes)\n        \n    def pause_timer(self):\n        \"\"\"Pause the server-side timer and calculate remaining time\"\"\"\n        if self.is_active and self.started_at:\n            # Calculate how much time has elapsed\n            elapsed_minutes = (datetime.utcnow() - self.started_at).total_seconds() / 60\n            # Update duration_minutes to remaining time\n            self.duration_minutes = max(0, int(self.duration_minutes - elapsed_minutes))\n            self.is_active = False\n            self.started_at = None\n            self.expected_completion = None\n    \n    def get_remaining_seconds(self):\n        \"\"\"Get remaining seconds for active timer\"\"\"\n        if not self.is_active or not self.expected_completion:\n            return self.duration_minutes * 60\n            \n        remaining = (self.expected_completion - datetime.utcnow()).total_seconds()\n        return max(0, int(remaining))\n    \n    def is_timer_completed(self):\n        \"\"\"Check if timer should be completed\"\"\"\n        if self.is_completed or not self.is_active:\n            return False\n            \n        return self.expected_completion is not None and datetime.utcnow() >= self.expected_completion\n    \n    def complete_task(self):\n        if not self.is_completed:\n            self.is_completed = True\n            self.completed_at = datetime.utcnow()\n            \n            # Calculate points earned\n            total_minutes = self.duration_minutes\n            points_earned = total_minutes * 0.083333  # 1/12 point per minute\n            \n            # Add points to user\n            user = db.session.get(User, self.user_id)\n            if user:\n                user.total_points += points_earned\n            \n            # Update active challenges with points earned during challenge period\n            active_challenges = Challenge.query.filter(\n                Challenge.status == 'active',\n                Challenge.start_date <= datetime.utcnow(),\n                Challenge.end_date > datetime.utcnow()\n            ).filter(\n                (Challenge.challenger_id == self.user_id) | (Challenge.challenged_id == self.user_id)\n            ).all()\n            \n            for challenge in active_challenges:\n                if challenge.challenger_id == self.user_id:\n                    challenge.challenger_points += points_earned\n                elif challenge.challenged_id == self.user_id:\n                    challenge.challenged_points += points_earned\n            \n            # Update daily stats\n            ist = pytz.timezone('Asia/Kolkata')\n            today = datetime.now(ist).date()\n            daily_stat = DailyStats.query.filter_by(user_id=self.user_id, date=today).first()\n            \n            if not daily_stat:\n                daily_stat = DailyStats()\n                daily_stat.user_id = self.user_id\n                daily_stat.date = today\n                daily_stat.minutes_studied = 0\n                daily_stat.tasks_completed = 0\n                daily_stat.points_earned = 0.0\n                db.session.add(daily_stat)\n            \n            daily_stat.minutes_studied += total_minutes\n            daily_stat.tasks_completed += 1\n            daily_stat.points_earned += points_earned\n            \n            # Update user's total study time and streak\n            if user:\n                user.total_study_time += total_minutes\n                # Update streak\n                user.update_streak(daily_stat.minutes_studied)\n            \n            return points_earned\n        return 0\n\nclass Challenge(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    challenger_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    challenged_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    duration_days = db.Column(db.Integer, nullable=False)\n    start_date = db.Column(db.DateTime, default=datetime.utcnow)\n    end_date = db.Column(db.DateTime, nullable=False)\n    challenger_points = db.Column(db.Float, default=0.0)\n    challenged_points = db.Column(db.Float, default=0.0)\n    status = db.Column(db.String(20), default='pending')  # pending, active, completed, declined\n    winner_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    points_gained = db.Column(db.Float, default=0.0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    winner = db.relationship('User', foreign_keys=[winner_id], backref='challenges_won')\n    \n    def calculate_winner(self):\n        if self.status == 'active' and datetime.utcnow() >= self.end_date:\n            if self.challenger_points > self.challenged_points:\n                self.winner_id = self.challenger_id\n                self.points_gained = abs(self.challenger_points - self.challenged_points)\n            elif self.challenged_points > self.challenger_points:\n                self.winner_id = self.challenged_id\n                self.points_gained = abs(self.challenged_points - self.challenger_points)\n            # If tied, no winner\n            \n            self.status = 'completed'\n            \n            # Award challenge bonus points\n            if self.winner_id:\n                winner = db.session.get(User, self.winner_id)\n                loser_id = self.challenged_id if self.winner_id == self.challenger_id else self.challenger_id\n                loser = db.session.get(User, loser_id)\n                \n                if winner:\n                    winner.total_points += self.points_gained\n                    \n                # Give consolation points to loser\n                if loser:\n                    loser.total_points += 2.0\n                    \n            # Send result emails\n            try:\n                from email_service import EmailService\n                challenger = db.session.get(User, self.challenger_id)\n                challenged = db.session.get(User, self.challenged_id)\n                \n                if challenger and getattr(challenger, 'challenge_emails', True):\n                    is_challenger_winner = (self.winner_id == self.challenger_id) if self.winner_id else False\n                    EmailService.send_challenge_result(challenger, self, is_challenger_winner)\n                    \n                if challenged and getattr(challenged, 'challenge_emails', True):\n                    is_challenged_winner = (self.winner_id == self.challenged_id) if self.winner_id else False\n                    EmailService.send_challenge_result(challenged, self, is_challenged_winner)\n            except Exception as e:\n                print(f\"Failed to send challenge result emails: {e}\")\n                \n            return True\n        return False\n\nclass DailyStats(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    date = db.Column(db.Date, nullable=False)\n    minutes_studied = db.Column(db.Integer, default=0)\n    points_earned = db.Column(db.Float, default=0.0)\n    tasks_completed = db.Column(db.Integer, default=0)\n    \n    __table_args__ = (db.UniqueConstraint('user_id', 'date', name='unique_user_date'),)\n","size_bytes":13731},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-login>=0.6.3\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"flask-wtf>=1.2.2\",\n    \"flask-mail>=0.10.0\",\n    \"pillow>=11.3.0\",\n    \"pytz>=2025.2\",\n    \"sqlalchemy>=2.0.42\",\n    \"werkzeug>=3.1.3\",\n    \"wtforms>=3.2.1\",\n]\n","size_bytes":469},"replit.md":{"content":"# DARKSULFOCUS - Gamified Study Platform\n\n## Overview\n\nDARKSULFOCUS is a gamified study platform built with Flask that helps users track their study progress through a point-based ranking system, streak tracking, and competitive challenges. The platform encourages consistent study habits through gamification elements including ranks, achievements, and peer competitions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Backend Architecture\n- **Framework**: Flask web framework with SQLAlchemy ORM\n- **Database**: PostgreSQL (migrated from SQLite for production use)\n- **Authentication**: Flask-Login with email verification system\n- **Email**: Flask-Mail for user verification and password reset\n- **File Handling**: Werkzeug for secure file uploads (profile images)\n- **Timer Storage**: Browser Local Storage (replaced database timer storage)\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 with Bootstrap 5 dark theme\n- **CSS Framework**: Bootstrap 5 with custom dark theme styling\n- **JavaScript**: Vanilla JavaScript with Chart.js for data visualization\n- **Responsive Design**: Mobile-first approach with sidebar navigation\n\n### Application Structure\n- **Blueprint-based routing**: Clean separation of routes in `routes.py`\n- **Form handling**: WTForms for validation and CSRF protection\n- **Model-View-Controller**: Traditional MVC pattern with Flask blueprints\n\n## Key Components\n\n### User Management System\n- **User Registration/Login**: Complete authentication flow with email verification\n- **Password Reset**: Secure token-based password reset via email\n- **Profile Management**: User profile updates with image upload support\n- **Session Management**: Flask-Login handles user sessions with \"remember me\" functionality\n\n### Gamification Engine\n- **Ranking System**: 8-tier ranking system based on total points (Dormant to Legend)\n- **Points System**: Dynamic point calculation based on study time and task completion\n- **Streak Tracking**: Daily study streak with grace days mechanism\n- **Progress Visualization**: Charts and progress bars for user engagement\n\n### Task Management\n- **Task Creation**: Users can create study tasks with time estimates\n- **Timer System**: Local storage-based timer that persists through page refreshes, navigation, and logouts\n- **Timer Persistence**: Timers continue running even when user closes browser or navigates away\n- **Task Completion**: Point rewards based on task duration when timer reaches zero\n- **Daily Statistics**: Tracking of daily study patterns and performance\n\n### Competition Features\n- **Challenge System**: Users can challenge each other to study competitions\n- **Leaderboards**: Ranking comparisons between users\n- **Social Elements**: Friend challenges and progress sharing\n\n## Data Flow\n\n### User Registration Flow\n1. User submits registration form\n2. Form validation (username/email uniqueness)\n3. Password hashing and user creation\n4. Email verification token generation\n5. Verification email sent\n6. User clicks verification link to activate account\n\n### Study Session Flow\n1. User creates or selects a task\n2. Timer starts tracking study time\n3. Real-time updates via JavaScript timer management\n4. Session completion triggers point calculation\n5. Streak and daily statistics updated\n6. Progress charts refreshed\n\n### Challenge Flow\n1. User initiates challenge with another user\n2. Challenge parameters stored (duration, rules)\n3. Both users track progress during challenge period\n4. Winner determined based on points/study time\n5. Results notification and ranking updates\n\n## External Dependencies\n\n### Python Packages\n- **Flask**: Core web framework\n- **SQLAlchemy**: Database ORM with connection pooling\n- **Flask-Login**: User session management\n- **Flask-Mail**: Email functionality for verification/reset\n- **WTForms**: Form handling and validation\n- **Werkzeug**: WSGI utilities and security helpers\n- **Pillow**: Image processing for profile pictures\n- **pytz**: Timezone handling for international users\n\n### Frontend Libraries\n- **Bootstrap 5**: UI framework with dark theme\n- **Font Awesome**: Icon library\n- **Chart.js**: Data visualization for progress tracking\n- **Vanilla JavaScript**: No heavy frontend framework dependencies\n\n### Email Services\n- **SMTP Configuration**: Configurable email provider (defaults to Gmail)\n- **Email Templates**: HTML email templates for verification and password reset\n\n## Deployment Strategy\n\n### Environment Configuration\n- **Environment Variables**: All sensitive config via environment variables\n- **Database URL**: Configurable database connection string\n- **Email Settings**: Configurable SMTP settings for different providers\n- **File Uploads**: Configurable upload directory and size limits\n\n### Production Considerations\n- **Proxy Support**: ProxyFix middleware for deployment behind reverse proxies\n- **Database Pool**: Connection pooling and ping for reliability\n- **Session Security**: Configurable secret key for session management\n- **File Security**: Secure filename handling for uploads\n\n### Database Migration\n- **PostgreSQL**: Successfully migrated from SQLite to PostgreSQL\n- **Connection Pooling**: Pre-configured for production database scaling\n- **Data Integrity**: Foreign key relationships and cascading deletes properly configured\n- **Timer Data Removal**: Removed timer state from database, now handled by browser local storage\n\n## Recent Changes (August 2025)\n\n### Email URL Generation Fix\n- **Date**: August 14, 2025\n- **Change**: Fixed email links to generate production URLs instead of localhost\n- **Technical Implementation**:\n  - Added `PRODUCTION_DOMAIN` environment variable support to Flask configuration\n  - Priority system: PRODUCTION_DOMAIN > REPLIT_DOMAINS > localhost fallback\n  - Updated app configuration to properly handle different deployment environments\n  - All email templates now generate correct URLs for production deployment on Render\n- **Environment Variables**:\n  - `PRODUCTION_DOMAIN=darksulfocus.onrender.com` for production URL generation\n  - Ensures all email links point to https://darksulfocus.onrender.com instead of localhost\n- **User Experience**: Email recipients now properly reach the production site when clicking links\n\n### Competition System Enhancement\n- **Date**: August 7, 2025\n- **Change**: Fixed and completed the competition system with automatic point tracking and challenge completion\n- **Key Fixes**:\n  1. **Challenge-Specific Points**: Points earned during challenges are now properly tracked in `challenger_points` and `challenged_points` fields\n  2. **Automatic Challenge Completion**: Background service now automatically detects and completes expired challenges\n  3. **Winner Calculation**: Automated winner determination with bonus points awarded to winners and consolation points to losers\n  4. **Result Notifications**: Automatic email notifications sent to both participants when challenges complete\n  5. **Real-time Progress**: Added active challenge progress display showing current points and time remaining\n- **Technical Implementation**:\n  - Modified `Task.complete_task()` method to update challenge points when tasks complete during active challenges\n  - Enhanced `Challenge.calculate_winner()` method with proper point distribution and email notifications\n  - Added `_check_completed_challenges()` method to background timer service\n  - Updated competition template to show active challenge progress with visual progress bars\n- **User Experience**: Competition system now fully automated from challenge creation to completion with email notifications\n\n## Recent Changes (August 2025)\n\n### Mobile Timer System Enhancement\n- **Date**: August 6, 2025\n- **Change**: Enhanced timer system for mobile Chrome users with background handling and completion detection\n- **Mobile-Specific Fixes**:\n  1. **Background Detection**: Timers automatically pause when Chrome goes to background/recent tabs\n  2. **Completion Recovery**: Detects completed timers when user returns to app after backgrounding\n  3. **Visual Indicators**: Special blue styling and mobile icon for timers paused due to backgrounding\n  4. **Battery Optimization**: Stops timer updates when page not visible to save battery\n  5. **Touch Detection**: Checks for completed timers on any touch/click interaction\n- **Technical Implementation**:\n  - Enhanced `TimerManager` class with mobile-specific event handlers\n  - Added `visibilitychange`, `blur`, `focus`, `pagehide`, `pageshow` event listeners\n  - Page visibility tracking with `isPageVisible` state\n  - Background duration tracking and logging\n  - Mobile-friendly button states (\"Resume\" for backgrounded timers)\n  - CSS styling for `.was-backgrounded` timer state\n- **User Experience**: Solves major mobile Chrome issue where timers would complete in background but not trigger completion logic\n\n### Timer System Redesign\n- **Date**: August 1, 2025\n- **Change**: Completely redesigned timer system to use browser local storage instead of database storage\n- **Benefits**: \n  - Timers persist through page refreshes, navigation, and even logouts\n  - Reduced server load (no more 30-second database syncs)\n  - Better user experience with instant timer state restoration\n  - No more timer resets when switching pages or losing connection\n- **Technical Details**:\n  - Removed `remaining_seconds`, `is_paused`, `is_active`, `paused_at`, `last_updated` fields from Task model\n  - Updated JavaScript TimerManager class to use localStorage API\n  - Added automatic cleanup of orphaned timers\n  - Created new `/complete_task/<id>` endpoint for task completion\n  - Updated templates to work with client-side timer management\n\n### Comprehensive Email System Implementation\n- **Date**: August 1, 2025\n- **Change**: Added complete automated email system with 11 different email types and scheduling\n- **New Email Types**:\n  1. **Verification & Security**: Email verification, password reset\n  2. **Daily Engagement**: Study reminders (6 PM IST), streak warnings (9 PM IST)\n  3. **Progress Tracking**: Weekly summaries (Sundays 10 AM IST)\n  4. **Achievement Notifications**: Rank ups, point milestones, streak milestones, hours studied\n  5. **Competition**: Challenge invitations, acceptance confirmations, results\n  6. **User Journey**: Welcome series for new users, re-engagement for inactive users\n- **Technical Implementation**:\n  - **Email Service** (`email_service.py`): Comprehensive email templates with DARKSULFOCUS branding\n  - **Email Scheduler** (`email_scheduler.py`): APScheduler-based automated email delivery\n  - **Email Preferences** (`email_preferences.py`): User preference management system\n  - **Database Schema**: Added email preference columns to User model\n  - **Real-time Integration**: Achievement emails triggered on task completion\n- **User Control**: \n  - Master email toggle with individual preference controls\n  - Email preferences accessible via navigation \"Email Settings\"\n  - Preference categories: notifications, daily reminders, weekly summaries, achievements, challenges\n- **Dependencies Added**: celery, redis, apscheduler for email automation and scheduling\n\n### Security Features\n- **CSRF Protection**: Built into all forms\n- **Password Hashing**: Werkzeug secure password hashing\n- **Email Verification**: Required before account activation\n- **Token-based Reset**: Secure password reset with expiring tokens\n- **File Upload Security**: Secure filename processing and size limits","size_bytes":11504},"routes.py":{"content":"import os\nimport secrets\nfrom datetime import datetime, timedelta\nfrom flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify, current_app\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom flask_mail import Message\nfrom werkzeug.utils import secure_filename\nfrom PIL import Image\nfrom sqlalchemy import desc\nimport logging\nimport pytz\n\nfrom app import db, mail\nfrom models import User, Task, Challenge, DailyStats\nfrom forms import LoginForm, RegisterForm, ProfileForm, TaskForm, ChallengeForm, ForgotPasswordForm, ResetPasswordForm\nfrom utils import send_verification_email, send_reset_email\nfrom email_service import EmailService\n\nmain = Blueprint('main', __name__)\n\n@main.route('/')\ndef index():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.home'))\n    return redirect(url_for('main.login'))\n\n@main.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.home'))\n    \n    form = LoginForm()\n    if form.validate_on_submit():\n        # Try to find user by username first, then by email\n        user = User.query.filter_by(username=form.username.data).first()\n        if not user:\n            user = User.query.filter_by(email=form.email.data).first()\n        \n        if user and user.check_password(form.password.data):\n            if user.is_verified:\n                login_user(user, remember=form.remember_me.data)\n                next_page = request.args.get('next')\n                return redirect(next_page) if next_page else redirect(url_for('main.home'))\n            else:\n                flash('Please verify your email before logging in.', 'warning')\n        else:\n            flash('Invalid username/email or password', 'danger')\n    \n    return render_template('login.html', form=form)\n\n@main.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.home'))\n    \n    form = RegisterForm()\n    if form.validate_on_submit():\n        user = User()\n        user.username = form.username.data\n        user.email = form.email.data\n        user.verification_token = secrets.token_urlsafe(32)\n        user.is_verified = True  # Auto-verify for now due to email config issues\n        user.set_password(form.password.data)\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        # Try to send verification email, but don't block registration if it fails\n        try:\n            send_verification_email(user)\n            flash('Registration successful! Check your email for verification link.', 'success')\n        except Exception as e:\n            current_app.logger.error(f'Email send failed: {e}')\n            flash('Registration successful! You can now log in directly.', 'success')\n        \n        return redirect(url_for('main.login'))\n    \n    return render_template('register.html', form=form)\n\n@main.route('/verify/<token>')\ndef verify_email(token):\n    user = User.query.filter_by(verification_token=token).first()\n    if user:\n        user.is_verified = True\n        user.verification_token = None\n        db.session.commit()\n        flash('Email verified successfully! You can now log in.', 'success')\n    else:\n        flash('Invalid verification token.', 'danger')\n    \n    return redirect(url_for('main.login'))\n\n@main.route('/home')\n@login_required\ndef home():\n    # Get user's active tasks (not completed)\n    active_tasks = Task.query.filter_by(user_id=current_user.id, is_completed=False).all()\n    \n    # Get today's study time for streak display\n    ist = pytz.timezone('Asia/Kolkata')\n    today = datetime.now(ist).date()\n    daily_stat = DailyStats.query.filter_by(user_id=current_user.id, date=today).first()\n    today_minutes = daily_stat.minutes_studied if daily_stat else 0\n    \n    return render_template('home.html', \n                         active_tasks=active_tasks,\n                         today_minutes=today_minutes,\n                         user_rank=current_user.get_rank())\n\n@main.route('/add_task', methods=['POST'])\n@login_required\ndef add_task():\n    form = TaskForm()\n    if form.validate_on_submit():\n        task = Task()\n        task.user_id = current_user.id\n        task.title = form.title.data\n        task.duration_minutes = form.duration_minutes.data\n        db.session.add(task)\n        db.session.commit()\n        flash('Task added successfully!', 'success')\n    else:\n        for field, errors in form.errors.items():\n            for error in errors:\n                flash(f'{error}', 'danger')\n    \n    return redirect(url_for('main.home'))\n\n# Timer control routes - now handled by JavaScript/Local Storage\n@main.route('/start_timer/<int:task_id>')\n@login_required\ndef start_timer(task_id):\n    # Timer control is now handled by JavaScript local storage\n    # This route exists for backward compatibility but redirects to home\n    flash('Timer started! Control is now handled by your browser.', 'info')\n    return redirect(url_for('main.home'))\n\n@main.route('/pause_timer/<int:task_id>')\n@login_required\ndef pause_timer(task_id):\n    # Timer control is now handled by JavaScript local storage\n    # This route exists for backward compatibility but redirects to home\n    flash('Timer paused! Control is now handled by your browser.', 'info')\n    return redirect(url_for('main.home'))\n\n@main.route('/delete_task/<int:task_id>')\n@login_required\ndef delete_task(task_id):\n    task = Task.query.filter_by(id=task_id, user_id=current_user.id).first_or_404()\n    db.session.delete(task)\n    db.session.commit()\n    flash('Task deleted successfully!', 'success')\n    \n    return redirect(url_for('main.home'))\n\n@main.route('/start_server_timer/<int:task_id>', methods=['POST'])\n@login_required\ndef start_server_timer(task_id):\n    \"\"\"Start a task timer on the server side\"\"\"\n    task = Task.query.filter_by(id=task_id, user_id=current_user.id, is_completed=False).first()\n    \n    if task:\n        # Pause all other active timers for this user (only one timer at a time)\n        Task.query.filter_by(user_id=current_user.id, is_active=True).update({'is_active': False})\n        \n        # Start this timer\n        task.start_timer()\n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'message': 'Timer started',\n            'expected_completion': task.expected_completion.isoformat(),\n            'remaining_seconds': task.get_remaining_seconds()\n        })\n    \n    return jsonify({'success': False, 'error': 'Task not found'})\n\n@main.route('/pause_server_timer/<int:task_id>', methods=['POST'])\n@login_required\ndef pause_server_timer(task_id):\n    \"\"\"Pause a task timer\"\"\"\n    task = Task.query.filter_by(id=task_id, user_id=current_user.id, is_completed=False).first()\n    \n    if task:\n        task.pause_timer()\n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'message': 'Timer paused',\n            'remaining_seconds': task.get_remaining_seconds()\n        })\n    \n    return jsonify({'success': False, 'error': 'Task not found'})\n\n@main.route('/get_timer_status/<int:task_id>', methods=['GET'])\n@login_required\ndef get_timer_status(task_id):\n    \"\"\"Get current timer status\"\"\"\n    task = Task.query.filter_by(id=task_id, user_id=current_user.id).first()\n    \n    if not task:\n        return jsonify({'success': False, 'error': 'Task not found'})\n    \n    # If task is already completed, return completed status\n    if task.is_completed:\n        return jsonify({\n            'success': True,\n            'completed': True,\n            'points_earned': 0,  # Points already awarded\n            'message': 'Task already completed!'\n        })\n    \n    # Check if timer should be completed\n    if task.is_timer_completed():\n        # Auto-complete the task\n        points_earned = task.complete_task()\n        task.is_active = False\n        task.started_at = None\n        task.expected_completion = None\n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'completed': True,\n            'points_earned': points_earned,\n            'message': 'Task completed!'\n        })\n    \n    return jsonify({\n        'success': True,\n        'is_active': task.is_active,\n        'is_completed': task.is_completed,\n        'remaining_seconds': task.get_remaining_seconds()\n    })\n\n@main.route('/complete_task/<int:task_id>', methods=['POST'])\n@login_required\ndef complete_task_route(task_id):\n    \"\"\"Complete a task - called when timer reaches zero\"\"\"\n    task = Task.query.filter_by(id=task_id, user_id=current_user.id, is_completed=False).first()\n    \n    if task:\n        # Store old values for achievement checking\n        old_rank = current_user.get_rank()\n        old_points = current_user.total_points\n        old_streak = current_user.current_streak\n        old_hours = current_user.total_study_time // 60\n        \n        # Stop server-side timer and complete task\n        task.is_active = False\n        task.started_at = None\n        task.expected_completion = None\n        points_earned = task.complete_task()\n        db.session.commit()\n        \n        # Check for achievements and send emails if enabled\n        if current_user.achievement_emails:\n            # Check for rank up\n            new_rank = current_user.get_rank()\n            if old_rank != new_rank:\n                EmailService.send_achievement_unlock(current_user, 'rank_up', {\n                    'old_rank': old_rank,\n                    'new_rank': new_rank\n                })\n            \n            # Check for points milestones (every 100 points)\n            if (int(old_points) // 100) < (int(current_user.total_points) // 100):\n                milestone = (int(current_user.total_points) // 100) * 100\n                EmailService.send_achievement_unlock(current_user, 'points_milestone', {\n                    'points': milestone\n                })\n            \n            # Check for streak milestones\n            if current_user.current_streak != old_streak and current_user.current_streak in [7, 30, 100, 365]:\n                EmailService.send_achievement_unlock(current_user, 'streak_milestone', {\n                    'days': current_user.current_streak\n                })\n            \n            # Check for hours milestones (every 10 hours)\n            new_hours = current_user.total_study_time // 60\n            if (old_hours // 10) < (new_hours // 10):\n                milestone_hours = (new_hours // 10) * 10\n                EmailService.send_achievement_unlock(current_user, 'hours_milestone', {\n                    'hours': milestone_hours\n                })\n        \n        return jsonify({\n            'success': True, \n            'completed': True, \n            'points_earned': points_earned,\n            'message': f'Task completed! You earned {points_earned:.1f} points.'\n        })\n    \n    return jsonify({'error': 'Task not found or already completed'})\n\n@main.route('/profile', methods=['GET', 'POST'])\n@login_required\ndef profile():\n    form = ProfileForm(current_user)\n    \n    if form.validate_on_submit():\n        # Check current password if trying to change password\n        if form.new_password.data:\n            if not form.current_password.data or not current_user.check_password(form.current_password.data):\n                flash('Current password is incorrect.', 'danger')\n                return render_template('profile.html', form=form)\n            current_user.set_password(form.new_password.data)\n        \n        # Handle profile image upload\n        if form.profile_image.data:\n            try:\n                file = form.profile_image.data\n                filename = secure_filename(file.filename)\n                \n                # Generate unique filename\n                unique_filename = f\"{current_user.id}_{secrets.token_hex(8)}_{filename}\"\n                \n                # Save file\n                upload_path = os.path.join(current_app.root_path, 'static', 'uploads', 'profiles')\n                os.makedirs(upload_path, exist_ok=True)\n                file_path = os.path.join(upload_path, unique_filename)\n                \n                # Resize and save image\n                image = Image.open(file)\n                image = image.convert('RGB')  # Convert to RGB if needed\n                \n                # Resize to 300x300 pixels\n                image.thumbnail((300, 300), Image.Resampling.LANCZOS)\n                image.save(file_path, 'JPEG', quality=85)\n                \n                # Delete old profile image if it exists and isn't default\n                if current_user.profile_image and current_user.profile_image != 'default.png':\n                    old_file_path = os.path.join(upload_path, current_user.profile_image)\n                    if os.path.exists(old_file_path):\n                        os.remove(old_file_path)\n                \n                current_user.profile_image = unique_filename\n                flash('Profile image updated successfully!', 'success')\n            except Exception as e:\n                flash('Error uploading image. Please try again.', 'danger')\n        \n        current_user.username = form.username.data\n        current_user.email = form.email.data\n        \n        db.session.commit()\n        flash('Profile updated successfully!', 'success')\n        return redirect(url_for('main.profile'))\n    \n    # Pre-populate form\n    form.username.data = current_user.username\n    form.email.data = current_user.email\n    \n    return render_template('profile.html', form=form)\n\n@main.route('/progress')\n@login_required\ndef progress():\n    # Get last 30 days of study data\n    ist = pytz.timezone('Asia/Kolkata')\n    end_date = datetime.now(ist).date()\n    start_date = end_date - timedelta(days=29)\n    \n    daily_stats = DailyStats.query.filter_by(user_id=current_user.id).filter(\n        DailyStats.date >= start_date,\n        DailyStats.date <= end_date\n    ).all()\n    \n    # Create data for chart\n    chart_data = []\n    current_date = start_date\n    stats_dict = {stat.date: stat.minutes_studied for stat in daily_stats}\n    \n    while current_date <= end_date:\n        minutes = stats_dict.get(current_date, 0)\n        hours = minutes / 60.0\n        chart_data.append({\n            'date': current_date.strftime('%b %d'),\n            'hours': round(hours, 1)\n        })\n        current_date += timedelta(days=1)\n    \n    return render_template('progress.html', chart_data=chart_data)\n\n@main.route('/competition', methods=['GET', 'POST'])\n@login_required\ndef competition():\n    form = ChallengeForm()\n    \n    if form.validate_on_submit():\n        opponent = User.query.filter_by(username=form.opponent_username.data).first()\n        \n        if opponent and opponent.id == current_user.id:\n            flash('You cannot challenge yourself!', 'danger')\n        elif opponent:\n            challenge = Challenge()\n            challenge.challenger_id = current_user.id\n            challenge.challenged_id = opponent.id\n            challenge.duration_days = form.duration_days.data\n            challenge.end_date = datetime.utcnow() + timedelta(days=form.duration_days.data)\n            challenge.status = 'pending'  # Should start as pending, not active\n            db.session.add(challenge)\n            db.session.commit()\n            \n            # Send challenge notification email (check if user has challenge emails enabled)\n            try:\n                # Use hasattr to check if challenge_emails field exists, default to True if not\n                if getattr(opponent, 'challenge_emails', True):\n                    from email_service import EmailService\n                    EmailService.send_challenge_notification(opponent, current_user, challenge)\n                    print(f\"Challenge email sent to {opponent.username}\")\n                else:\n                    print(f\"Challenge emails disabled for {opponent.username}\")\n            except Exception as e:\n                print(f\"Failed to send challenge email: {e}\")\n            \n            flash(f'Challenge sent to {opponent.username}!', 'success')\n            return redirect(url_for('main.competition'))\n        else:\n            flash('User not found!', 'danger')\n    \n    # Get user's challenges\n    sent_challenges = Challenge.query.filter_by(challenger_id=current_user.id).order_by(Challenge.created_at.desc()).limit(10).all()\n    received_challenges = Challenge.query.filter_by(challenged_id=current_user.id).order_by(Challenge.created_at.desc()).limit(10).all()\n    \n    # Get active challenges to show current progress\n    active_challenges = Challenge.query.filter(\n        Challenge.status == 'active',\n        (Challenge.challenger_id == current_user.id) | (Challenge.challenged_id == current_user.id)\n    ).all()\n    \n    return render_template('competition.html', \n                         form=form,\n                         sent_challenges=sent_challenges,\n                         received_challenges=received_challenges,\n                         active_challenges=active_challenges)\n\n@main.route('/accept_challenge/<int:challenge_id>')\n@login_required\ndef accept_challenge(challenge_id):\n    challenge = Challenge.query.filter_by(id=challenge_id, challenged_id=current_user.id).first_or_404()\n    challenge.status = 'active'\n    challenge.start_date = datetime.utcnow()  # Reset start date when accepted\n    challenge.end_date = datetime.utcnow() + timedelta(days=challenge.duration_days)\n    db.session.commit()\n    \n    # Send acceptance confirmation email to challenger \n    challenger = User.query.get(challenge.challenger_id)\n    if challenger:\n        try:\n            # Use hasattr to check if challenge_emails field exists, default to True if not\n            if getattr(challenger, 'challenge_emails', True):\n                from email_service import EmailService\n                EmailService.send_challenge_accepted(challenger, current_user, challenge)\n                print(f\"Challenge acceptance email sent to {challenger.username}\")\n            else:\n                print(f\"Challenge emails disabled for {challenger.username}\")\n        except Exception as e:\n            print(f\"Failed to send challenge acceptance email: {e}\")\n    \n    flash('Challenge accepted!', 'success')\n    return redirect(url_for('main.competition'))\n\n@main.route('/decline_challenge/<int:challenge_id>')\n@login_required\ndef decline_challenge(challenge_id):\n    challenge = Challenge.query.filter_by(id=challenge_id, challenged_id=current_user.id).first_or_404()\n    challenge.status = 'declined'\n    db.session.commit()\n    \n    # Send decline notification email to challenger if they have challenge emails enabled\n    challenger = User.query.get(challenge.challenger_id)\n    if challenger:\n        try:\n            if getattr(challenger, 'challenge_emails', True):\n                from email_service import EmailService\n                EmailService.send_challenge_declined(challenger, current_user, challenge)\n                print(f\"Challenge decline email sent to {challenger.username}\")\n            else:\n                print(f\"Challenge emails disabled for {challenger.username}\")\n        except Exception as e:\n            print(f\"Failed to send challenge decline email: {e}\")\n    \n    flash('Challenge declined.', 'info')\n    return redirect(url_for('main.competition'))\n\n@main.route('/leaderboard')\n@login_required\ndef leaderboard():\n    # Get top 10 users by total points\n    top_users = User.query.order_by(User.total_points.desc()).limit(10).all()\n    \n    leaderboard_data = []\n    ist = pytz.timezone('Asia/Kolkata')\n    for i, user in enumerate(top_users, 1):\n        # Calculate last active (last completed task or task creation)\n        last_completed_task = Task.query.filter_by(user_id=user.id, is_completed=True).order_by(desc(Task.completed_at)).first()\n        last_any_task = Task.query.filter_by(user_id=user.id).order_by(Task.created_at.desc()).first()\n\n        if last_completed_task and last_completed_task.completed_at:\n            last_active_utc = last_completed_task.completed_at\n        elif last_any_task:\n            last_active_utc = last_any_task.created_at\n        else:\n            last_active_utc = user.joined_date\n\n        # Convert UTC to Asia/Kolkata\n        if last_active_utc and last_active_utc.tzinfo is None:\n            last_active_utc = last_active_utc.replace(tzinfo=pytz.utc)\n        last_active = last_active_utc.astimezone(ist) if last_active_utc else None\n\n        leaderboard_data.append({\n            'rank': i,\n            'user': user,\n            'points': user.total_points,\n            'rank_name': user.get_rank(),\n            'streak': user.current_streak,\n            'last_active': last_active\n        })\n    \n    return render_template('leaderboard.html', leaderboard_data=leaderboard_data)\n\n@main.route('/help')\ndef help():\n    return render_template('help.html')\n\n@main.route('/test-email')\n@login_required\ndef test_email():\n    \"\"\"Test email functionality (development only)\"\"\"\n    if current_user.achievement_emails:\n        EmailService.send_achievement_unlock(current_user, 'rank_up', {\n            'old_rank': 'Initiate',\n            'new_rank': 'Grinder'\n        })\n        flash('Test achievement email sent!', 'success')\n    else:\n        flash('Achievement emails are disabled in your preferences.', 'info')\n    return redirect(url_for('main.home'))\n\n@main.route('/forgot_password', methods=['GET', 'POST'])\ndef forgot_password():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.home'))\n    \n    form = ForgotPasswordForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(email=form.email.data).first()\n        if user:\n            user.reset_token = secrets.token_urlsafe(32)\n            user.reset_token_expires = datetime.utcnow() + timedelta(hours=1)\n            db.session.commit()\n            send_reset_email(user)\n        \n        flash('If an account with that email exists, a password reset link has been sent.', 'info')\n        return redirect(url_for('main.login'))\n    \n    return render_template('forgot_password.html', form=form)\n\n@main.route('/reset_password/<token>', methods=['GET', 'POST'])\ndef reset_password(token):\n    if current_user.is_authenticated:\n        return redirect(url_for('main.home'))\n    \n    user = User.query.filter_by(reset_token=token).first()\n    if not user or user.reset_token_expires < datetime.utcnow():\n        flash('Invalid or expired reset token.', 'danger')\n        return redirect(url_for('main.forgot_password'))\n    \n    form = ResetPasswordForm()\n    if form.validate_on_submit():\n        user.set_password(form.password.data)\n        user.reset_token = None\n        user.reset_token_expires = None\n        db.session.commit()\n        flash('Password reset successful! You can now log in.', 'success')\n        return redirect(url_for('main.login'))\n    \n    return render_template('reset_password.html', form=form)\n\n@main.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('You have been logged out.', 'info')\n    return redirect(url_for('main.login'))\n\ndef save_profile_image(form_image):\n    random_hex = secrets.token_hex(8)\n    _, f_ext = os.path.splitext(form_image.filename)\n    picture_fn = random_hex + f_ext\n    picture_path = os.path.join(current_app.root_path, 'static/uploads', picture_fn)\n    \n    # Resize image\n    output_size = (150, 150)\n    img = Image.open(form_image)\n    img.thumbnail(output_size)\n    img.save(picture_path)\n    \n    return picture_fn\n","size_bytes":23633},"utils.py":{"content":"# Legacy utils.py - Email functionality moved to email_service.py\nfrom email_service import EmailService\n\ndef send_verification_email(user):\n    \"\"\"Legacy wrapper for email verification\"\"\"\n    return EmailService.send_verification_email(user)\n\ndef send_reset_email(user):\n    \"\"\"Legacy wrapper for password reset email\"\"\"\n    return EmailService.send_reset_email(user)\n","size_bytes":369},"static/css/style.css":{"content":".rank-badge .badge-img {\n    background: none !important;\n    border-radius: 0 !important;\n    box-shadow: none !important;\n}\n.rank-badge .badge-img + * {\n    background: none !important;\n}\n.rank-badge {\n    background: none !important;\n    border-radius: 0 !important;\n    width: auto;\n    height: auto;\n    padding: 0;\n    font-size: inherit;\n    font-weight: inherit;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n}\n/* Remove background and border-radius from rank-badge if it contains a badge image */\n.rank-badge > .badge-img {\n    background: none !important;\n    border-radius: 0 !important;\n    box-shadow: none !important;\n}\n.rank-badge {\n    background: none;\n    border-radius: 0;\n    padding: 0;\n    font-size: inherit;\n    font-weight: inherit;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n}\n/* Badge image size for rank badges */\n.badge-img {\n    width: 40px;\n    height: 40px;\n    object-fit: contain;\n    border-radius: 50%;\n    display: block;\n}\n/* Dark Theme Variables */\n:root {\n    --bg-primary: #1a1a1a;\n    --bg-secondary: #2d2d2d;\n    --bg-tertiary: #3a3a3a;\n    --text-primary: #ffffff;\n    --text-secondary: #cccccc;\n    --text-muted: #888888;\n    --accent-primary: #00ff88;\n    --accent-secondary: #00cc6a;\n    --accent-warning: #ffc107;\n    --accent-danger: #dc3545;\n    --accent-success: #28a745;\n    --border-color: #444444;\n    --shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n    --sidebar-width: 280px;\n}\n\n/* Base Styles */\nbody {\n    background: linear-gradient(135deg, var(--bg-primary), var(--bg-secondary));\n    color: var(--text-primary);\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    margin: 0;\n    padding: 0;\n    min-height: 100vh;\n}\n\n/* Bootstrap Overrides */\n.card {\n    background: var(--bg-secondary);\n    border: 1px solid var(--border-color);\n    box-shadow: var(--shadow);\n}\n\n.card-header {\n    background: var(--bg-tertiary);\n    border-bottom: 1px solid var(--border-color);\n}\n\n.form-control, .form-select {\n    background: var(--bg-tertiary);\n    border: 1px solid var(--border-color);\n    color: var(--text-primary);\n}\n\n.form-control:focus, .form-select:focus {\n    background: var(--bg-tertiary);\n    border-color: var(--accent-primary);\n    box-shadow: 0 0 0 0.2rem rgba(0, 255, 136, 0.25);\n    color: var(--text-primary);\n}\n\n.btn-primary {\n    background: var(--accent-primary);\n    border-color: var(--accent-primary);\n    color: var(--bg-primary);\n    font-weight: 600;\n}\n\n.btn-primary:hover, .btn-primary:focus {\n    background: var(--accent-secondary);\n    border-color: var(--accent-secondary);\n    color: var(--bg-primary);\n}\n\n.btn-outline-secondary {\n    border-color: var(--border-color);\n    color: var(--text-secondary);\n}\n\n.btn-outline-secondary:hover {\n    background: var(--bg-tertiary);\n    border-color: var(--accent-primary);\n    color: var(--accent-primary);\n}\n\n.text-primary {\n    color: var(--accent-primary) !important;\n}\n\n.table-dark {\n    --bs-table-bg: var(--bg-secondary);\n    --bs-table-striped-bg: var(--bg-tertiary);\n}\n\n/* Sidebar Styles */\n.sidebar {\n    position: fixed;\n    top: 0;\n    left: -280px; /* Start completely hidden */\n    width: var(--sidebar-width);\n    height: 100vh;\n    background: var(--bg-secondary);\n    border-right: 1px solid var(--border-color);\n    transition: left 0.3s ease;\n    z-index: 1050;\n    overflow-y: auto;\n    display: none; /* Hidden by default */\n}\n\n.sidebar.active {\n    left: 0;\n    display: block; /* Show when active */\n}\n\n.sidebar-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    z-index: 1040;\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s ease;\n    pointer-events: none; /* Don't interfere when hidden */\n}\n\n.sidebar-overlay.active {\n    opacity: 1;\n    visibility: visible;\n    pointer-events: auto; /* Enable clicking when active */\n}\n\n.sidebar-header {\n    padding: 1.5rem;\n    border-bottom: 1px solid var(--border-color);\n    text-align: center;\n}\n\n.sidebar-header h3 {\n    margin: 0;\n    color: var(--accent-primary);\n    font-weight: 700;\n}\n\n.sidebar-user {\n    padding: 1.5rem;\n    text-align: center;\n    border-bottom: 1px solid var(--border-color);\n}\n\n.user-avatar i {\n    font-size: 3rem;\n    color: var(--accent-primary);\n}\n\n.username {\n    font-weight: 600;\n    margin-top: 0.5rem;\n}\n\n.user-rank {\n    color: var(--accent-warning);\n    font-size: 0.875rem;\n    font-weight: 500;\n}\n\n.sidebar-menu {\n    list-style: none;\n    padding: 0;\n    margin: 1rem 0;\n}\n\n.sidebar-menu li {\n    margin: 0.25rem 0;\n}\n\n.sidebar-menu a {\n    display: flex;\n    align-items: center;\n    padding: 0.75rem 1.5rem;\n    color: var(--text-secondary);\n    text-decoration: none;\n    transition: all 0.3s ease;\n}\n\n.sidebar-menu a:hover, .sidebar-menu a.active {\n    background: var(--bg-tertiary);\n    color: var(--accent-primary);\n    border-right: 3px solid var(--accent-primary);\n}\n\n.sidebar-menu a i {\n    margin-right: 0.75rem;\n    width: 1.25rem;\n    text-align: center;\n}\n\n.sidebar-footer {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    padding: 1.5rem;\n    border-top: 1px solid var(--border-color);\n}\n\n.logout-btn {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0.75rem;\n    background: var(--bg-tertiary);\n    color: var(--text-secondary);\n    text-decoration: none;\n    border-radius: 0.375rem;\n    transition: all 0.3s ease;\n}\n\n.logout-btn:hover {\n    background: var(--accent-danger);\n    color: white;\n}\n\n/* Main Content Styles */\n.main-content {\n    transition: margin-left 0.3s ease;\n    min-height: 100vh;\n}\n\n.top-nav {\n    background: var(--bg-secondary);\n    border-bottom: 1px solid var(--border-color);\n    padding: 1rem 1.5rem;\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.sidebar-toggle {\n    background: none;\n    border: none;\n    color: var(--text-primary);\n    font-size: 1.25rem;\n    cursor: pointer;\n    padding: 0.5rem;\n    border-radius: 0.375rem;\n    transition: background 0.3s ease;\n}\n\n.sidebar-toggle:hover {\n    background: var(--bg-tertiary);\n}\n\n.nav-title {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    font-weight: 600;\n    font-size: 1.1rem;\n}\n\n.page-content {\n    padding: 2rem;\n}\n\n/* Auth Body and Layout Styles */\n.auth-body {\n    background: linear-gradient(135deg, var(--bg-primary), var(--bg-secondary));\n    color: var(--text-primary);\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    margin: 0;\n    padding: 0;\n    min-height: 100vh;\n}\n\n.auth-main-content {\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n\n.auth-main-content .page-content {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n}\n\n/* Auth Styles */\n.auth-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n}\n\n.auth-card {\n    background: var(--bg-secondary);\n    border: 1px solid var(--border-color);\n    border-radius: 0.75rem;\n    box-shadow: var(--shadow);\n    width: 100%;\n    max-width: 450px;\n    overflow: hidden;\n}\n\n.auth-header {\n    padding: 2rem 2rem 1rem;\n    text-align: center;\n}\n\n.auth-form {\n    padding: 0 2rem 1rem;\n}\n\n.auth-footer {\n    padding: 1rem 2rem 2rem;\n}\n\n.auth-input {\n    padding: 0.75rem;\n    border-radius: 0.5rem;\n}\n\n.auth-btn {\n    padding: 0.75rem;\n    border-radius: 0.5rem;\n    font-weight: 600;\n}\n\n/* Password Toggle Button */\n.input-group .btn-outline-secondary {\n    border-color: var(--border-color);\n    color: var(--text-muted);\n    background: var(--bg-tertiary);\n    transition: all 0.3s ease;\n}\n\n.input-group .btn-outline-secondary:hover {\n    background: var(--bg-primary);\n    border-color: var(--accent-primary);\n    color: var(--accent-primary);\n}\n\n.input-group .btn-outline-secondary:focus {\n    box-shadow: 0 0 0 0.2rem rgba(0, 255, 136, 0.25);\n    border-color: var(--accent-primary);\n    color: var(--accent-primary);\n}\n\n.input-group .form-control {\n    border-right: none;\n}\n\n.input-group .btn-outline-secondary {\n    border-left: none;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n}\n\n/* Stats Cards */\n.stat-card {\n    background: var(--bg-secondary);\n    border: 1px solid var(--border-color);\n    border-radius: 0.75rem;\n    padding: 1.5rem;\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    box-shadow: var(--shadow);\n    transition: transform 0.3s ease;\n}\n\n.stat-card:hover {\n    transform: translateY(-2px);\n}\n\n.stat-card.rank-card {\n    border-color: var(--accent-warning);\n    background: linear-gradient(135deg, var(--bg-secondary), rgba(255, 193, 7, 0.1));\n}\n\n.stat-icon {\n    font-size: 2rem;\n    width: 60px;\n    height: 60px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: var(--bg-tertiary);\n    border-radius: 50%;\n}\n\n.stat-value {\n    font-size: 1.5rem;\n    font-weight: 700;\n    color: var(--accent-primary);\n}\n\n.stat-label {\n    color: var(--text-muted);\n    font-size: 0.875rem;\n}\n\n/* Task Styles */\n.task-card {\n    border: 1px solid var(--border-color);\n    box-shadow: var(--shadow);\n}\n\n.task-item {\n    background: var(--bg-tertiary);\n    border: 1px solid var(--border-color);\n    border-radius: 0.75rem;\n    padding: 1.5rem;\n    transition: all 0.3s ease;\n}\n\n.task-item:hover {\n    border-color: var(--accent-primary);\n    box-shadow: 0 4px 12px rgba(0, 255, 136, 0.2);\n}\n\n.task-item.paused {\n    border-color: var(--accent-warning);\n    background: linear-gradient(135deg, var(--bg-tertiary), rgba(255, 193, 7, 0.1));\n}\n\n/* Mobile-specific timer states */\n.task-item.was-backgrounded {\n    border-color: #17a2b8;\n    background: linear-gradient(135deg, var(--bg-tertiary), rgba(23, 162, 184, 0.15));\n    box-shadow: 0 4px 12px rgba(23, 162, 184, 0.3);\n}\n\n.task-item.was-backgrounded::before {\n    content: \"📱\";\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    font-size: 1.2rem;\n    opacity: 0.8;\n}\n\n.task-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n}\n\n.task-title {\n    font-weight: 600;\n    margin: 0;\n    color: var(--text-primary);\n}\n\n.task-duration {\n    background: var(--accent-primary);\n    color: var(--bg-primary);\n    padding: 0.25rem 0.5rem;\n    border-radius: 0.375rem;\n    font-size: 0.75rem;\n    font-weight: 600;\n}\n\n.timer-display {\n    font-size: 2rem;\n    font-weight: 700;\n    font-family: 'Courier New', monospace;\n    text-align: center;\n    color: var(--accent-primary);\n    margin: 1rem 0;\n    padding: 0.5rem;\n    background: var(--bg-primary);\n    border-radius: 0.5rem;\n}\n\n.task-controls {\n    display: flex;\n    gap: 0.5rem;\n    justify-content: center;\n}\n\n/* Empty State */\n.empty-state {\n    text-align: center;\n    padding: 3rem 1rem;\n}\n\n.empty-state i {\n    opacity: 0.5;\n}\n\n/* Chart Container */\n#studyChart {\n    max-height: 400px !important;\n    height: 400px !important;\n}\n\n.chart-container {\n    position: relative;\n    height: 400px;\n    width: 100%;\n}\n\n/* CTA Card */\n.cta-card {\n    background: linear-gradient(135deg, var(--bg-secondary), var(--bg-tertiary));\n    border: 1px solid var(--accent-primary);\n    border-radius: 0.75rem;\n    padding: 2rem;\n    text-align: center;\n    box-shadow: 0 4px 12px rgba(0, 255, 136, 0.2);\n}\n\n/* Leaderboard Styles */\n.leaderboard-header {\n    background: linear-gradient(135deg, var(--bg-secondary), var(--bg-tertiary));\n    border: 1px solid var(--accent-primary);\n    box-shadow: 0 4px 12px rgba(0, 255, 136, 0.2);\n}\n\n.rank-badge {\n    padding: 0.4rem 0.8rem;\n    font-size: 0.75rem;\n    font-weight: 600;\n}\n\n.rank-dormant { background-color: #6c757d !important; }\n.rank-novice { background-color: #17a2b8 !important; }\n.rank-apprentice { background-color: #28a745 !important; }\n.rank-adept { background-color: #20c997 !important; }\n.rank-expert { background-color: #ffc107 !important; color: #000 !important; }\n.rank-master { background-color: #fd7e14 !important; }\n.rank-grandmaster { background-color: #e83e8c !important; }\n.rank-legend { background-color: #6f42c1 !important; }\n.rank-myth { background-color: #dc3545 !important; }\n.rank-darkensul-initiate { background-color: #495057 !important; }\n.rank-darkensul-core { background: linear-gradient(45deg, #000, #ff0000) !important; }\n.rank-darkensul-transcendent { background: linear-gradient(45deg, #ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff) !important; }\n\n.table-success {\n    background-color: rgba(0, 255, 136, 0.1) !important;\n    border-color: var(--accent-primary) !important;\n}\n\n.user-avatar i {\n    color: var(--accent-primary);\n}\n\n/* Profile Styles */\n.profile-card {\n    border: 1px solid var(--accent-primary);\n    background: linear-gradient(135deg, var(--bg-secondary), rgba(0, 255, 136, 0.05));\n}\n\n.profile-avatar {\n    margin-bottom: 1rem;\n}\n\n.profile-image {\n    width: 150px;\n    height: 150px;\n    object-fit: cover;\n    border: 3px solid var(--accent-primary);\n    box-shadow: 0 4px 12px rgba(0, 255, 136, 0.3);\n}\n\n.profile-image-preview {\n    width: 100px;\n    height: 100px;\n    object-fit: cover;\n    border: 2px solid var(--accent-primary);\n    border-radius: 50%;\n    margin-top: 10px;\n}\n\n.sidebar-profile-image {\n    width: 60px;\n    height: 60px;\n    object-fit: cover;\n    border: 2px solid var(--accent-primary);\n}\n\n.leaderboard-profile-image {\n    width: 50px;\n    height: 50px;\n    object-fit: cover;\n    border: 2px solid var(--accent-primary);\n}\n\n.profile-stats {\n    display: flex;\n    justify-content: space-around;\n    margin-top: 1.5rem;\n}\n\n.stat-item {\n    text-align: center;\n}\n\n.stat-box {\n    background: var(--bg-tertiary);\n    border: 1px solid var(--border-color);\n    border-radius: 0.5rem;\n    padding: 1rem;\n    text-align: center;\n}\n\n/* Rank Display */\n.rank-display-card {\n    border: 2px solid var(--accent-warning);\n    background: linear-gradient(135deg, var(--bg-secondary), rgba(255, 193, 7, 0.1));\n}\n\n.rank-icon {\n    padding: 1rem;\n    background: var(--bg-primary);\n    border-radius: 50%;\n    display: inline-block;\n}\n\n/* Progress Styles */\n.streak-display {\n    background: var(--bg-primary);\n    border-radius: 0.75rem;\n    padding: 1.5rem;\n}\n\n.streak-number {\n    font-size: 3rem;\n    font-weight: 700;\n    color: var(--accent-danger);\n}\n\n.streak-label {\n    color: var(--text-muted);\n    margin-top: 0.5rem;\n}\n\n.streak-rules, .rule-item {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n    margin-bottom: 0.75rem;\n}\n\n.rule-item i {\n    width: 1.25rem;\n    text-align: center;\n}\n\n/* Help Page Styles */\n.rank-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n    gap: 1rem;\n}\n\n.rank-item {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    background: var(--bg-tertiary);\n    border: 1px solid var(--border-color);\n    border-radius: 0.75rem;\n    padding: 1rem;\n    transition: transform 0.3s ease;\n}\n\n.rank-item:hover {\n    transform: translateY(-2px);\n    border-color: var(--accent-primary);\n}\n\n.rank-badge {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.25rem;\n    flex-shrink: 0;\n}\n\n.rank-badge.dormant { background: #6c757d; color: white; }\n.rank-badge.initiate { background: #28a745; color: white; }\n.rank-badge.grinder { background: #17a2b8; color: white; }\n.rank-badge.executor { background: #ffc107; color: black; }\n.rank-badge.obsessor { background: #fd7e14; color: white; }\n.rank-badge.disciplinar { background: #dc3545; color: white; }\n.rank-badge.sentinel { background: #6f42c1; color: white; }\n.rank-badge.dominus { background: #e83e8c; color: white; }\n.rank-badge.phantom { background: #495057; color: white; }\n.rank-badge.apex-mind { background: #00ff88; color: black; }\n.rank-badge.system-override { background: #ff0080; color: white; }\n.rank-badge.darkensul-core { background: linear-gradient(45deg, #ff0080, #00ff88); color: white; }\n\n.rank-info h6 {\n    margin: 0;\n    font-weight: 600;\n}\n\n.rank-info span {\n    color: var(--text-muted);\n    font-size: 0.875rem;\n}\n\n.info-item {\n    display: flex;\n    align-items: flex-start;\n    gap: 0.75rem;\n    margin-bottom: 1rem;\n}\n\n.info-item i {\n    margin-top: 0.25rem;\n    width: 1.25rem;\n    text-align: center;\n    flex-shrink: 0;\n}\n\n.step-card {\n    text-align: center;\n    padding: 1.5rem;\n    background: var(--bg-tertiary);\n    border: 1px solid var(--border-color);\n    border-radius: 0.75rem;\n    height: 100%;\n}\n\n.step-number {\n    width: 40px;\n    height: 40px;\n    background: var(--accent-primary);\n    color: var(--bg-primary);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: 700;\n    margin: 0 auto 1rem;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .page-content {\n        padding: 1rem;\n    }\n    \n    .rank-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .profile-stats {\n        flex-direction: column;\n        gap: 1rem;\n    }\n    \n    .task-controls {\n        flex-wrap: wrap;\n    }\n    \n    .auth-container {\n        padding: 1rem;\n    }\n    \n    .auth-card {\n        max-width: 100%;\n    }\n}\n\n/* Animations */\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n.card, .task-item, .stat-card {\n    animation: fadeIn 0.6s ease forwards;\n}\n\n/* Scrollbar Styling */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--bg-primary);\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--bg-tertiary);\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: var(--accent-primary);\n}\n","size_bytes":17759},"static/js/app.js":{"content":"/**\n * DARKSULFOCUS - Main Application JavaScript\n * Handles sidebar navigation, notifications, and general UI interactions\n */\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeSidebar();\n    initializeNotifications();\n    initializeFormValidation();\n    initializeTooltips();\n});\n\n/**\n * Sidebar Navigation Management\n */\nfunction initializeSidebar() {\n    const sidebarToggle = document.getElementById('sidebarToggle');\n    const sidebar = document.getElementById('sidebar');\n    const sidebarOverlay = document.getElementById('sidebarOverlay');\n    const mainContent = document.getElementById('mainContent');\n\n    if (!sidebarToggle || !sidebar || !sidebarOverlay) return;\n\n    // Toggle sidebar\n    sidebarToggle.addEventListener('click', function() {\n        toggleSidebar();\n    });\n\n    // Close sidebar when clicking overlay\n    sidebarOverlay.addEventListener('click', function() {\n        closeSidebar();\n    });\n\n    // Close sidebar when clicking outside (anywhere in main content)\n    document.addEventListener('click', function(e) {\n        if (sidebar.classList.contains('active') && \n            !sidebar.contains(e.target) && \n            !sidebarToggle.contains(e.target)) {\n            closeSidebar();\n        }\n    });\n\n    // Close sidebar on escape key\n    document.addEventListener('keydown', function(e) {\n        if (e.key === 'Escape' && sidebar.classList.contains('active')) {\n            closeSidebar();\n        }\n    });\n\n    // Handle window resize\n    window.addEventListener('resize', function() {\n        if (window.innerWidth > 768 && sidebar.classList.contains('active')) {\n            closeSidebar();\n        }\n    });\n}\n\nfunction toggleSidebar() {\n    const sidebar = document.getElementById('sidebar');\n    const sidebarOverlay = document.getElementById('sidebarOverlay');\n    \n    if (sidebar.classList.contains('active')) {\n        closeSidebar();\n    } else {\n        openSidebar();\n    }\n}\n\nfunction openSidebar() {\n    const sidebar = document.getElementById('sidebar');\n    const sidebarOverlay = document.getElementById('sidebarOverlay');\n    \n    sidebar.style.display = 'block'; // Show sidebar first\n    setTimeout(() => {\n        sidebar.classList.add('active');\n        sidebarOverlay.classList.add('active');\n    }, 10); // Small delay for smooth animation\n    document.body.style.overflow = 'hidden';\n}\n\nfunction closeSidebar() {\n    const sidebar = document.getElementById('sidebar');\n    const sidebarOverlay = document.getElementById('sidebarOverlay');\n    \n    sidebar.classList.remove('active');\n    sidebarOverlay.classList.remove('active');\n    document.body.style.overflow = '';\n    \n    // Hide sidebar after animation completes\n    setTimeout(() => {\n        if (!sidebar.classList.contains('active')) {\n            sidebar.style.display = 'none';\n        }\n    }, 300); // Match transition duration\n}\n\n/**\n * Notification Management\n */\nfunction initializeNotifications() {\n    // Auto-dismiss alerts after 5 seconds\n    const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');\n    alerts.forEach(function(alert) {\n        setTimeout(function() {\n            if (alert && alert.parentNode) {\n                const bsAlert = new bootstrap.Alert(alert);\n                bsAlert.close();\n            }\n        }, 5000);\n    });\n\n    // Request notification permission for timer alerts\n    if ('Notification' in window && Notification.permission === 'default') {\n        Notification.requestPermission();\n    }\n}\n\n/**\n * Show browser notification\n */\nfunction showNotification(title, message, icon = '/static/favicon.ico') {\n    if ('Notification' in window && Notification.permission === 'granted') {\n        const notification = new Notification(title, {\n            body: message,\n            icon: icon,\n            badge: icon,\n            tag: 'darksulfocus-timer'\n        });\n\n        // Auto close after 5 seconds\n        setTimeout(() => notification.close(), 5000);\n\n        return notification;\n    }\n}\n\n/**\n * Show success toast\n */\nfunction showSuccessToast(message) {\n    showToast(message, 'success');\n}\n\n/**\n * Show error toast\n */\nfunction showErrorToast(message) {\n    showToast(message, 'danger');\n}\n\n/**\n * Show info toast\n */\nfunction showInfoToast(message) {\n    showToast(message, 'info');\n}\n\n/**\n * Generic toast function\n */\nfunction showToast(message, type = 'info') {\n    // Create toast container if it doesn't exist\n    let toastContainer = document.querySelector('.toast-container');\n    if (!toastContainer) {\n        toastContainer = document.createElement('div');\n        toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';\n        toastContainer.style.zIndex = '1055';\n        document.body.appendChild(toastContainer);\n    }\n\n    // Create toast element\n    const toastId = 'toast-' + Date.now();\n    const toastHTML = `\n        <div id=\"${toastId}\" class=\"toast align-items-center text-bg-${type} border-0\" role=\"alert\">\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">\n                    ${message}\n                </div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n            </div>\n        </div>\n    `;\n\n    toastContainer.insertAdjacentHTML('beforeend', toastHTML);\n\n    // Initialize and show toast\n    const toastElement = document.getElementById(toastId);\n    const toast = new bootstrap.Toast(toastElement, {\n        autohide: true,\n        delay: 4000\n    });\n    toast.show();\n\n    // Remove toast element after it's hidden\n    toastElement.addEventListener('hidden.bs.toast', function() {\n        toastElement.remove();\n    });\n}\n\n/**\n * Form Validation Enhancement\n */\nfunction initializeFormValidation() {\n    // Add real-time validation feedback\n    const forms = document.querySelectorAll('form');\n    forms.forEach(function(form) {\n        form.addEventListener('submit', function(e) {\n            if (!form.checkValidity()) {\n                e.preventDefault();\n                e.stopPropagation();\n                showErrorToast('Please fill in all required fields correctly.');\n            }\n            form.classList.add('was-validated');\n        });\n\n        // Real-time validation for inputs\n        const inputs = form.querySelectorAll('input, select, textarea');\n        inputs.forEach(function(input) {\n            input.addEventListener('blur', function() {\n                validateField(input);\n            });\n\n            input.addEventListener('input', function() {\n                if (input.classList.contains('is-invalid')) {\n                    validateField(input);\n                }\n            });\n        });\n    });\n}\n\nfunction validateField(field) {\n    const isValid = field.checkValidity();\n    \n    field.classList.remove('is-valid', 'is-invalid');\n    \n    if (field.value.trim() !== '') {\n        if (isValid) {\n            field.classList.add('is-valid');\n        } else {\n            field.classList.add('is-invalid');\n        }\n    }\n}\n\n/**\n * Initialize Bootstrap Tooltips\n */\nfunction initializeTooltips() {\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n}\n\n/**\n * Utility Functions\n */\nfunction formatTime(seconds) {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n}\n\nfunction formatDuration(minutes) {\n    if (minutes < 60) {\n        return `${minutes}m`;\n    } else {\n        const hours = Math.floor(minutes / 60);\n        const mins = minutes % 60;\n        return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;\n    }\n}\n\n/**\n * Confirmation Dialogs\n */\nfunction confirmAction(message, callback) {\n    if (confirm(message)) {\n        callback();\n    }\n}\n\n/**\n * Loading States\n */\nfunction showLoading(element, text = 'Loading...') {\n    if (typeof element === 'string') {\n        element = document.querySelector(element);\n    }\n    \n    if (element) {\n        element.innerHTML = `\n            <div class=\"d-flex align-items-center\">\n                <div class=\"spinner-border spinner-border-sm me-2\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                ${text}\n            </div>\n        `;\n        element.disabled = true;\n    }\n}\n\nfunction hideLoading(element, originalText) {\n    if (typeof element === 'string') {\n        element = document.querySelector(element);\n    }\n    \n    if (element) {\n        element.innerHTML = originalText;\n        element.disabled = false;\n    }\n}\n\n/**\n * Local Storage Utilities\n */\nfunction saveToLocalStorage(key, value) {\n    try {\n        localStorage.setItem(key, JSON.stringify(value));\n    } catch (e) {\n        console.warn('LocalStorage not available:', e);\n    }\n}\n\nfunction getFromLocalStorage(key, defaultValue = null) {\n    try {\n        const item = localStorage.getItem(key);\n        return item ? JSON.parse(item) : defaultValue;\n    } catch (e) {\n        console.warn('Error reading from LocalStorage:', e);\n        return defaultValue;\n    }\n}\n\nfunction removeFromLocalStorage(key) {\n    try {\n        localStorage.removeItem(key);\n    } catch (e) {\n        console.warn('Error removing from LocalStorage:', e);\n    }\n}\n\n/**\n * Theme Management (if needed for future enhancements)\n */\nfunction initializeTheme() {\n    const savedTheme = getFromLocalStorage('theme', 'dark');\n    document.documentElement.setAttribute('data-theme', savedTheme);\n}\n\n/**\n * Export functions for global access\n */\nwindow.DarkSulFocus = {\n    toggleSidebar,\n    openSidebar,\n    closeSidebar,\n    showNotification,\n    showSuccessToast,\n    showErrorToast,\n    showInfoToast,\n    formatTime,\n    formatDuration,\n    confirmAction,\n    showLoading,\n    hideLoading,\n    saveToLocalStorage,\n    getFromLocalStorage,\n    removeFromLocalStorage\n};\n","size_bytes":10173},"static/js/main.js":{"content":"/**\n * DARKSULFOCUS - Main Application Enhancement JavaScript\n * Additional functionality for enhanced user experience\n */\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeCharts();\n    initializeAnimations();\n    initializeProgressTracking();\n    initializeRankSystem();\n    initializeCompetitionFeatures();\n    initializeProfileEnhancements();\n});\n\n/**\n * Chart Initialization and Management\n */\nfunction initializeCharts() {\n    // Progress chart is handled in progress.html template\n    // This function can be extended for additional charts\n    \n    // Initialize mini charts for profile page if present\n    initializeMiniCharts();\n    \n    // Initialize rank progress bars\n    initializeRankProgressBars();\n}\n\nfunction initializeMiniCharts() {\n    const miniChartElements = document.querySelectorAll('.mini-chart');\n    \n    miniChartElements.forEach(element => {\n        const type = element.dataset.chartType;\n        const data = JSON.parse(element.dataset.chartData || '[]');\n        \n        if (type === 'streak') {\n            createStreakMiniChart(element, data);\n        } else if (type === 'points') {\n            createPointsMiniChart(element, data);\n        }\n    });\n}\n\nfunction createStreakMiniChart(element, data) {\n    const canvas = element.querySelector('canvas');\n    if (!canvas) return;\n    \n    new Chart(canvas.getContext('2d'), {\n        type: 'line',\n        data: {\n            labels: data.map(d => d.date),\n            datasets: [{\n                data: data.map(d => d.streak),\n                borderColor: '#dc3545',\n                backgroundColor: 'rgba(220, 53, 69, 0.1)',\n                borderWidth: 2,\n                fill: true,\n                tension: 0.4\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: { legend: { display: false } },\n            scales: {\n                x: { display: false },\n                y: { display: false }\n            },\n            elements: { point: { radius: 0 } }\n        }\n    });\n}\n\nfunction createPointsMiniChart(element, data) {\n    const canvas = element.querySelector('canvas');\n    if (!canvas) return;\n    \n    new Chart(canvas.getContext('2d'), {\n        type: 'bar',\n        data: {\n            labels: data.map(d => d.date),\n            datasets: [{\n                data: data.map(d => d.points),\n                backgroundColor: '#00ff88',\n                borderRadius: 2\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: { legend: { display: false } },\n            scales: {\n                x: { display: false },\n                y: { display: false }\n            }\n        }\n    });\n}\n\n/**\n * Rank Progress Bar Animation\n */\nfunction initializeRankProgressBars() {\n    const progressBars = document.querySelectorAll('.progress-bar');\n    \n    progressBars.forEach(bar => {\n        const targetWidth = bar.style.width || bar.getAttribute('aria-valuenow') + '%';\n        bar.style.width = '0%';\n        \n        setTimeout(() => {\n            bar.style.transition = 'width 2s ease-in-out';\n            bar.style.width = targetWidth;\n        }, 500);\n    });\n}\n\n/**\n * Enhanced Animations\n */\nfunction initializeAnimations() {\n    // Stagger card animations\n    const cards = document.querySelectorAll('.card, .stat-card, .task-item');\n    cards.forEach((card, index) => {\n        card.style.animationDelay = `${index * 0.1}s`;\n    });\n    \n    // Hover animations for interactive elements\n    initializeHoverAnimations();\n    \n    // Scroll animations\n    initializeScrollAnimations();\n}\n\nfunction initializeHoverAnimations() {\n    // Enhanced button hover effects\n    const buttons = document.querySelectorAll('.btn');\n    buttons.forEach(button => {\n        button.addEventListener('mouseenter', function() {\n            this.style.transform = 'translateY(-2px)';\n        });\n        \n        button.addEventListener('mouseleave', function() {\n            this.style.transform = 'translateY(0)';\n        });\n    });\n    \n    // Card hover effects\n    const hoverCards = document.querySelectorAll('.stat-card, .task-item, .rank-item');\n    hoverCards.forEach(card => {\n        card.addEventListener('mouseenter', function() {\n            this.style.transform = 'translateY(-4px) scale(1.02)';\n            this.style.boxShadow = '0 8px 25px rgba(0, 255, 136, 0.3)';\n        });\n        \n        card.addEventListener('mouseleave', function() {\n            this.style.transform = 'translateY(0) scale(1)';\n            this.style.boxShadow = '';\n        });\n    });\n}\n\nfunction initializeScrollAnimations() {\n    const observerOptions = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n    };\n    \n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.classList.add('animate-in');\n            }\n        });\n    }, observerOptions);\n    \n    // Observe elements for scroll animation\n    const animateElements = document.querySelectorAll('.card, .stat-card, .rank-item');\n    animateElements.forEach(el => {\n        el.classList.add('animate-on-scroll');\n        observer.observe(el);\n    });\n}\n\n/**\n * Progress Tracking Enhancements\n */\nfunction initializeProgressTracking() {\n    // Real-time progress updates\n    trackStudySession();\n    \n    // Daily goal tracking\n    initializeDailyGoals();\n    \n    // Achievement notifications\n    initializeAchievements();\n}\n\nfunction trackStudySession() {\n    let sessionStartTime = Date.now();\n    let totalSessionTime = 0;\n    \n    // Track active session time\n    setInterval(() => {\n        if (!document.hidden) {\n            totalSessionTime += 1000; // Add 1 second\n            updateSessionDisplay(totalSessionTime);\n        }\n    }, 1000);\n    \n    // Save session data on page unload\n    window.addEventListener('beforeunload', () => {\n        const sessionData = {\n            date: new Date().toISOString().split('T')[0],\n            duration: totalSessionTime,\n            timestamp: Date.now()\n        };\n        \n        window.DarkSulFocus?.saveToLocalStorage('lastSession', sessionData);\n    });\n}\n\nfunction updateSessionDisplay(sessionTime) {\n    const sessionDisplay = document.querySelector('.session-time');\n    if (sessionDisplay) {\n        const minutes = Math.floor(sessionTime / 60000);\n        const seconds = Math.floor((sessionTime % 60000) / 1000);\n        sessionDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    }\n}\n\nfunction initializeDailyGoals() {\n    const dailyGoal = 120; // 2 hours in minutes\n    const todayMinutes = getTodayStudyMinutes();\n    \n    updateDailyGoalProgress(todayMinutes, dailyGoal);\n}\n\nfunction getTodayStudyMinutes() {\n    // This would typically come from the server\n    // For now, extract from the page if available\n    const todayElement = document.querySelector('[data-today-minutes]');\n    return todayElement ? parseInt(todayElement.dataset.todayMinutes) : 0;\n}\n\nfunction updateDailyGoalProgress(current, goal) {\n    const progressElements = document.querySelectorAll('.daily-goal-progress');\n    progressElements.forEach(element => {\n        const percentage = Math.min((current / goal) * 100, 100);\n        const progressBar = element.querySelector('.progress-bar');\n        const progressText = element.querySelector('.progress-text');\n        \n        if (progressBar) {\n            progressBar.style.width = `${percentage}%`;\n            progressBar.setAttribute('aria-valuenow', percentage);\n        }\n        \n        if (progressText) {\n            progressText.textContent = `${current}/${goal} minutes`;\n        }\n    });\n}\n\n/**\n * Rank System Enhancements\n */\nfunction initializeRankSystem() {\n    // Animated rank display\n    animateRankDisplay();\n    \n    // Rank progression indicators\n    initializeRankProgression();\n    \n    // Next rank calculator\n    initializeNextRankCalculator();\n}\n\nfunction animateRankDisplay() {\n    const rankElements = document.querySelectorAll('.stat-value, .rank-display');\n    \n    rankElements.forEach(element => {\n        if (element.textContent.match(/^\\d+\\.?\\d*$/)) {\n            const finalValue = parseFloat(element.textContent);\n            animateNumber(element, 0, finalValue, 2000);\n        }\n    });\n}\n\nfunction animateNumber(element, start, end, duration) {\n    const startTime = Date.now();\n    const difference = end - start;\n    \n    function update() {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(elapsed / duration, 1);\n        const easeProgress = easeOutCubic(progress);\n        const current = start + (difference * easeProgress);\n        \n        element.textContent = current.toFixed(1);\n        \n        if (progress < 1) {\n            requestAnimationFrame(update);\n        } else {\n            element.textContent = end.toFixed(1);\n        }\n    }\n    \n    update();\n}\n\nfunction easeOutCubic(t) {\n    return 1 - Math.pow(1 - t, 3);\n}\n\nfunction initializeRankProgression() {\n    const currentPoints = getCurrentUserPoints();\n    const nextRankInfo = getNextRankInfo(currentPoints);\n    \n    if (nextRankInfo) {\n        updateRankProgressionDisplay(currentPoints, nextRankInfo);\n    }\n}\n\nfunction getCurrentUserPoints() {\n    const pointsElement = document.querySelector('[data-user-points]');\n    return pointsElement ? parseFloat(pointsElement.dataset.userPoints) : 0;\n}\n\nfunction getNextRankInfo(currentPoints) {\n    const ranks = [\n        { name: 'Dormant', min: 0, max: 100 },\n        { name: 'Initiate', min: 101, max: 300 },\n        { name: 'Grinder', min: 301, max: 600 },\n        { name: 'Executor', min: 601, max: 1000 },\n        { name: 'Obsessor', min: 1001, max: 1500 },\n        { name: 'Disciplinar', min: 1501, max: 2000 },\n        { name: 'Sentinel', min: 2001, max: 2600 },\n        { name: 'Dominus', min: 2601, max: 3300 },\n        { name: 'Phantom', min: 3301, max: 4000 },\n        { name: 'Apex Mind', min: 4001, max: 4700 },\n        { name: 'System Override', min: 4701, max: 5500 },\n        { name: 'Darkensul Core', min: 5501, max: Infinity }\n    ];\n    \n    return ranks.find(rank => currentPoints < rank.max);\n}\n\nfunction updateRankProgressionDisplay(currentPoints, nextRank) {\n    const progressionElements = document.querySelectorAll('.rank-progression');\n    \n    progressionElements.forEach(element => {\n        const pointsNeeded = nextRank.max - currentPoints;\n        const progressPercentage = ((currentPoints - nextRank.min) / (nextRank.max - nextRank.min)) * 100;\n        \n        element.innerHTML = `\n            <div class=\"next-rank-info\">\n                <span class=\"next-rank-name\">${nextRank.name}</span>\n                <span class=\"points-needed\">${pointsNeeded.toFixed(0)} points needed</span>\n            </div>\n            <div class=\"progress mt-2\">\n                <div class=\"progress-bar bg-primary\" style=\"width: ${progressPercentage}%\"></div>\n            </div>\n        `;\n    });\n}\n\nfunction initializeNextRankCalculator() {\n    const calculatorElements = document.querySelectorAll('.next-rank-calculator');\n    \n    calculatorElements.forEach(element => {\n        const button = element.querySelector('.calculate-btn');\n        const display = element.querySelector('.calculation-result');\n        \n        if (button && display) {\n            button.addEventListener('click', () => {\n                const currentPoints = getCurrentUserPoints();\n                const nextRank = getNextRankInfo(currentPoints);\n                \n                if (nextRank) {\n                    const pointsNeeded = nextRank.max - currentPoints;\n                    const minutesNeeded = Math.ceil(pointsNeeded / 0.083333);\n                    const hoursNeeded = Math.ceil(minutesNeeded / 60);\n                    const daysNeeded = Math.ceil(hoursNeeded / 2); // Assuming 2 hours per day\n                    \n                    display.innerHTML = `\n                        <div class=\"calculation-breakdown\">\n                            <p><strong>To reach ${nextRank.name}:</strong></p>\n                            <ul>\n                                <li>${pointsNeeded.toFixed(1)} points needed</li>\n                                <li>${minutesNeeded} minutes of study</li>\n                                <li>${hoursNeeded} hours of study</li>\n                                <li>~${daysNeeded} days at 2h/day</li>\n                            </ul>\n                        </div>\n                    `;\n                }\n            });\n        }\n    });\n}\n\n/**\n * Competition Feature Enhancements\n */\nfunction initializeCompetitionFeatures() {\n    // Real-time competition updates\n    initializeCompetitionUpdates();\n    \n    // Challenge validation\n    initializeChallengeValidation();\n    \n    // Competition statistics\n    initializeCompetitionStats();\n}\n\nfunction initializeCompetitionUpdates() {\n    // Check for active competitions periodically\n    setInterval(() => {\n        updateActiveCompetitions();\n    }, 60000); // Check every minute\n}\n\nfunction updateActiveCompetitions() {\n    const activeCompetitions = document.querySelectorAll('.active-competition');\n    \n    activeCompetitions.forEach(competition => {\n        const endTime = new Date(competition.dataset.endTime);\n        const now = new Date();\n        const timeLeft = endTime - now;\n        \n        if (timeLeft > 0) {\n            updateCompetitionCountdown(competition, timeLeft);\n        } else {\n            markCompetitionEnded(competition);\n        }\n    });\n}\n\nfunction updateCompetitionCountdown(element, timeLeft) {\n    const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n    \n    const countdownElement = element.querySelector('.competition-countdown');\n    if (countdownElement) {\n        countdownElement.textContent = `${days}d ${hours}h ${minutes}m left`;\n    }\n}\n\nfunction markCompetitionEnded(element) {\n    element.classList.add('competition-ended');\n    const countdownElement = element.querySelector('.competition-countdown');\n    if (countdownElement) {\n        countdownElement.textContent = 'Competition ended';\n    }\n}\n\nfunction initializeChallengeValidation() {\n    const challengeForms = document.querySelectorAll('.challenge-form');\n    \n    challengeForms.forEach(form => {\n        const usernameInput = form.querySelector('input[name=\"opponent_username\"]');\n        \n        if (usernameInput) {\n            usernameInput.addEventListener('input', debounce(validateUsername, 500));\n        }\n    });\n}\n\nfunction validateUsername(event) {\n    const username = event.target.value.trim();\n    const feedback = event.target.parentNode.querySelector('.username-feedback');\n    \n    if (username.length < 3) {\n        showUsernameFeedback(feedback, 'Username must be at least 3 characters', 'invalid');\n        return;\n    }\n    \n    // Here you could add an AJAX call to check username existence\n    // For now, just show a generic validation message\n    showUsernameFeedback(feedback, 'Username format is valid', 'valid');\n}\n\nfunction showUsernameFeedback(element, message, type) {\n    if (!element) {\n        element = document.createElement('div');\n        element.className = 'username-feedback small mt-1';\n    }\n    \n    element.textContent = message;\n    element.className = `username-feedback small mt-1 text-${type === 'valid' ? 'success' : 'danger'}`;\n}\n\nfunction initializeCompetitionStats() {\n    // Calculate and display competition statistics\n    const statsElements = document.querySelectorAll('.competition-stats');\n    \n    statsElements.forEach(element => {\n        calculateCompetitionStats(element);\n    });\n}\n\nfunction calculateCompetitionStats(element) {\n    const challenges = document.querySelectorAll('.challenge-item');\n    const stats = {\n        total: challenges.length,\n        won: 0,\n        lost: 0,\n        pending: 0,\n        active: 0\n    };\n    \n    challenges.forEach(challenge => {\n        const status = challenge.dataset.status;\n        const winner = challenge.dataset.winner;\n        const currentUserId = challenge.dataset.currentUserId;\n        \n        if (status === 'pending') stats.pending++;\n        else if (status === 'active') stats.active++;\n        else if (status === 'completed') {\n            if (winner === currentUserId) stats.won++;\n            else stats.lost++;\n        }\n    });\n    \n    element.innerHTML = `\n        <div class=\"stats-grid\">\n            <div class=\"stat-item\">\n                <div class=\"stat-value\">${stats.total}</div>\n                <div class=\"stat-label\">Total</div>\n            </div>\n            <div class=\"stat-item\">\n                <div class=\"stat-value text-success\">${stats.won}</div>\n                <div class=\"stat-label\">Won</div>\n            </div>\n            <div class=\"stat-item\">\n                <div class=\"stat-value text-danger\">${stats.lost}</div>\n                <div class=\"stat-label\">Lost</div>\n            </div>\n            <div class=\"stat-item\">\n                <div class=\"stat-value text-warning\">${stats.active}</div>\n                <div class=\"stat-label\">Active</div>\n            </div>\n        </div>\n    `;\n}\n\n/**\n * Profile Enhancement Features\n */\nfunction initializeProfileEnhancements() {\n    // Profile image preview\n    initializeImagePreview();\n    \n    // Form validation enhancements\n    initializeAdvancedValidation();\n    \n    // Profile completion tracker\n    initializeProfileCompletion();\n}\n\nfunction initializeImagePreview() {\n    const imageInput = document.querySelector('input[type=\"file\"][name=\"profile_image\"]');\n    \n    if (imageInput) {\n        imageInput.addEventListener('change', function(e) {\n            const file = e.target.files[0];\n            if (file) {\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    showImagePreview(e.target.result);\n                };\n                reader.readAsDataURL(file);\n            }\n        });\n    }\n}\n\nfunction showImagePreview(imageSrc) {\n    let preview = document.querySelector('.image-preview');\n    \n    if (!preview) {\n        preview = document.createElement('div');\n        preview.className = 'image-preview mt-2';\n        \n        const imageInput = document.querySelector('input[type=\"file\"][name=\"profile_image\"]');\n        imageInput.parentNode.appendChild(preview);\n    }\n    \n    preview.innerHTML = `\n        <img src=\"${imageSrc}\" alt=\"Preview\" class=\"img-thumbnail\" style=\"max-width: 150px; max-height: 150px;\">\n        <button type=\"button\" class=\"btn btn-sm btn-outline-danger ms-2\" onclick=\"clearImagePreview()\">\n            <i class=\"fas fa-times\"></i> Remove\n        </button>\n    `;\n}\n\nfunction clearImagePreview() {\n    const preview = document.querySelector('.image-preview');\n    const imageInput = document.querySelector('input[type=\"file\"][name=\"profile_image\"]');\n    \n    if (preview) preview.remove();\n    if (imageInput) imageInput.value = '';\n}\n\nfunction initializeAdvancedValidation() {\n    // Password strength meter\n    const passwordInput = document.querySelector('input[name=\"new_password\"]');\n    \n    if (passwordInput) {\n        passwordInput.addEventListener('input', function() {\n            updatePasswordStrength(this.value);\n        });\n    }\n    \n    // Email format validation\n    const emailInputs = document.querySelectorAll('input[type=\"email\"]');\n    emailInputs.forEach(input => {\n        input.addEventListener('blur', function() {\n            validateEmailFormat(this);\n        });\n    });\n}\n\nfunction updatePasswordStrength(password) {\n    const strength = calculatePasswordStrength(password);\n    const meter = getOrCreatePasswordMeter();\n    \n    meter.className = `password-strength-meter strength-${strength.level}`;\n    meter.innerHTML = `\n        <div class=\"strength-bar\">\n            <div class=\"strength-fill\" style=\"width: ${strength.percentage}%\"></div>\n        </div>\n        <div class=\"strength-text\">${strength.text}</div>\n    `;\n}\n\nfunction calculatePasswordStrength(password) {\n    let score = 0;\n    \n    if (password.length >= 8) score += 25;\n    if (password.match(/[a-z]/)) score += 25;\n    if (password.match(/[A-Z]/)) score += 25;\n    if (password.match(/[0-9]/)) score += 15;\n    if (password.match(/[^a-zA-Z0-9]/)) score += 10;\n    \n    let level = 'weak';\n    let text = 'Weak';\n    \n    if (score >= 80) {\n        level = 'strong';\n        text = 'Strong';\n    } else if (score >= 60) {\n        level = 'medium';\n        text = 'Medium';\n    }\n    \n    return { level, text, percentage: Math.min(score, 100) };\n}\n\nfunction getOrCreatePasswordMeter() {\n    let meter = document.querySelector('.password-strength-meter');\n    \n    if (!meter) {\n        meter = document.createElement('div');\n        meter.className = 'password-strength-meter mt-2';\n        \n        const passwordInput = document.querySelector('input[name=\"new_password\"]');\n        passwordInput.parentNode.appendChild(meter);\n    }\n    \n    return meter;\n}\n\nfunction validateEmailFormat(input) {\n    const email = input.value.trim();\n    const isValid = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n    \n    input.classList.remove('is-valid', 'is-invalid');\n    \n    if (email && !isValid) {\n        input.classList.add('is-invalid');\n    } else if (email && isValid) {\n        input.classList.add('is-valid');\n    }\n}\n\nfunction initializeProfileCompletion() {\n    const completionItems = [\n        { selector: 'input[name=\"username\"]', label: 'Username set' },\n        { selector: 'input[name=\"email\"]', label: 'Email verified' },\n        { selector: '.profile-image', label: 'Profile image' },\n        { selector: '.user-bio', label: 'Bio added' }\n    ];\n    \n    const completedItems = completionItems.filter(item => {\n        const element = document.querySelector(item.selector);\n        return element && element.value && element.value.trim();\n    });\n    \n    const completionPercentage = Math.round((completedItems.length / completionItems.length) * 100);\n    updateProfileCompletionDisplay(completionPercentage, completedItems, completionItems);\n}\n\nfunction updateProfileCompletionDisplay(percentage, completed, total) {\n    const completionElement = document.querySelector('.profile-completion');\n    \n    if (completionElement) {\n        completionElement.innerHTML = `\n            <h6>Profile Completion</h6>\n            <div class=\"progress mb-2\">\n                <div class=\"progress-bar bg-primary\" style=\"width: ${percentage}%\"></div>\n            </div>\n            <small class=\"text-muted\">${completed.length}/${total.length} sections completed (${percentage}%)</small>\n        `;\n    }\n}\n\n/**\n * Utility Functions\n */\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n// Export functions for global access\nwindow.DarkSulFocusMain = {\n    initializeCharts,\n    initializeAnimations,\n    initializeProgressTracking,\n    initializeRankSystem,\n    initializeCompetitionFeatures,\n    initializeProfileEnhancements,\n    animateNumber,\n    clearImagePreview,\n    calculatePasswordStrength,\n    validateEmailFormat\n};\n","size_bytes":23550},"static/js/timer.js":{"content":"/**\n * DARKSULFOCUS - Local Storage Timer Management\n * Handles persistent timer state using browser local storage\n * Timers persist through page refreshes, navigation, and logouts\n */\n\nclass TimerManager {\n    constructor() {\n        this.timers = new Map();\n        this.updateInterval = null;\n        this.initialized = false;\n        this.storageKey = 'darksulfocus_timers';\n        this.isPageVisible = !document.hidden;\n        this.backgroundStartTime = null;\n        \n        this.init();\n    }\n\n    init() {\n        if (this.initialized) return;\n        \n        this.loadTimersFromStorage();\n        this.findAndInitializeTimers();\n        this.startUpdateLoop();\n        this.setupEventListeners();\n        \n        this.initialized = true;\n        console.log('Timer Manager initialized with local storage');\n    }\n\n    loadTimersFromStorage() {\n        try {\n            const storedTimers = localStorage.getItem(this.storageKey);\n            if (storedTimers) {\n                const timersData = JSON.parse(storedTimers);\n                Object.entries(timersData).forEach(([taskId, timerData]) => {\n                    let remainingSeconds = timerData.remainingSeconds;\n                    // If endTimestamp is present and not paused, calculate remaining\n                    if (timerData.endTimestamp && !timerData.isPaused) {\n                        const now = Date.now();\n                        remainingSeconds = Math.max(0, Math.ceil((timerData.endTimestamp - now) / 1000));\n                    }\n                    this.timers.set(taskId, {\n                        ...timerData,\n                        remainingSeconds: remainingSeconds,\n                        lastUpdate: Date.now(),\n                        element: null, // Will be set when DOM elements are found\n                        taskItem: null\n                    });\n                });\n                console.log(`Loaded ${this.timers.size} timers from local storage`);\n            }\n        } catch (error) {\n            console.error('Error loading timers from storage:', error);\n            localStorage.removeItem(this.storageKey);\n        }\n    }\n\n    saveTimersToStorage() {\n        try {\n            const timersData = {};\n            this.timers.forEach((timer, taskId) => {\n                // Save endTimestamp if running, remainingSeconds if paused\n                let timerData = {\n                    isPaused: timer.isPaused,\n                    totalDuration: timer.totalDuration,\n                    title: timer.title,\n                    lastUpdate: timer.lastUpdate\n                };\n                if (!timer.isPaused && timer.endTimestamp) {\n                    timerData.endTimestamp = timer.endTimestamp;\n                } else {\n                    timerData.remainingSeconds = Math.ceil(timer.remainingSeconds);\n                }\n                timersData[taskId] = timerData;\n            });\n            localStorage.setItem(this.storageKey, JSON.stringify(timersData));\n        } catch (error) {\n            console.error('Error saving timers to storage:', error);\n        }\n    }\n\n    findAndInitializeTimers() {\n        const timerElements = document.querySelectorAll('.timer-display');\n        \n        timerElements.forEach(element => {\n            const taskId = this.getTaskId(element);\n            const taskItem = element.closest('.task-item');\n            \n            if (taskId) {\n                // Check if timer exists in storage\n                let timer = this.timers.get(taskId);\n                \n                if (!timer) {\n                    // Create new timer from DOM data\n                    const remainingSeconds = parseInt(element.dataset.remaining) || 0;\n                    const titleElement = taskItem.querySelector('.task-title');\n                    const durationElement = taskItem.querySelector('.task-duration');\n                    \n                    timer = {\n                        remainingSeconds: remainingSeconds,\n                        isPaused: true, // New timers start paused\n                        lastUpdate: Date.now(),\n                        totalDuration: remainingSeconds,\n                        title: titleElement ? titleElement.textContent : 'Task',\n                        element: element,\n                        taskItem: taskItem\n                    };\n                    this.timers.set(taskId, timer);\n                } else {\n                    // Restore DOM references for existing timer\n                    timer.element = element;\n                    timer.taskItem = taskItem;\n                }\n                \n                this.updateTimerDisplay(taskId);\n                this.updateTimerVisualState(timer);\n            }\n        });\n        \n        // Clean up timers that no longer have DOM elements\n        this.cleanupOrphanedTimers();\n        \n        console.log(`Initialized ${this.timers.size} timers`);\n        this.saveTimersToStorage();\n    }\n\n    cleanupOrphanedTimers() {\n        // Only cleanup if we're on a page that shows tasks\n        const taskContainer = document.querySelector('.task-card, .tasks-container, .task-list, #active-tasks');\n        if (!taskContainer) {\n            // Not on a tasks page, don't cleanup timers\n            return;\n        }\n\n        const activeTaskIds = new Set();\n        document.querySelectorAll('.task-item').forEach(item => {\n            const taskId = item.dataset.taskId;\n            if (taskId) activeTaskIds.add(taskId);\n        });\n\n        // Only remove timers that don't have corresponding DOM elements on task pages\n        for (const [taskId, timer] of this.timers.entries()) {\n            if (!activeTaskIds.has(taskId)) {\n                this.timers.delete(taskId);\n                console.log(`Cleaned up orphaned timer: ${taskId}`);\n            }\n        }\n    }\n\n    getTaskId(element) {\n        const taskItem = element.closest('.task-item');\n        return taskItem ? taskItem.dataset.taskId : null;\n    }\n\n    startUpdateLoop() {\n        if (this.updateInterval) {\n            clearInterval(this.updateInterval);\n        }\n        \n        this.updateInterval = setInterval(() => {\n            this.updateActiveTimers();\n        }, 1000);\n    }\n\n    // No server sync needed - using local storage only\n\n    updateActiveTimers() {\n        // Don't update timers if page is not visible to save battery\n        if (!this.isPageVisible) {\n            return;\n        }\n        \n        const now = Date.now();\n        let needsSave = false;\n        this.timers.forEach((timer, taskId) => {\n            if (!timer.isPaused && timer.endTimestamp && timer.remainingSeconds > 0) {\n                const prevSeconds = Math.ceil(timer.remainingSeconds);\n                timer.remainingSeconds = Math.max(0, Math.ceil((timer.endTimestamp - now) / 1000));\n                timer.lastUpdate = now;\n                // Only update DOM if value changed\n                if (Math.ceil(timer.remainingSeconds) !== prevSeconds) {\n                    this.updateTimerDisplay(taskId);\n                }\n                // Check if timer completed\n                if (timer.remainingSeconds <= 0) {\n                    this.handleTimerCompletion(taskId);\n                }\n            }\n        });\n    }\n\n    updateTimerDisplay(taskId) {\n        const timer = this.timers.get(taskId);\n        if (!timer || !timer.element) return;\n        // Only use integer seconds for display\n        const intSeconds = Math.ceil(timer.remainingSeconds);\n        const timeString = this.formatTime(intSeconds);\n        timer.element.textContent = timeString;\n        // Update visual state based on remaining time\n        this.updateTimerVisualState(timer);\n    }\n\n    updateTimerVisualState(timer) {\n        const element = timer.element;\n        const taskItem = timer.taskItem;\n        \n        // Remove existing state classes\n        element.classList.remove('timer-warning', 'timer-danger', 'timer-completed');\n        taskItem?.classList.remove('paused');\n        \n        if (timer.remainingSeconds <= 0) {\n            element.classList.add('timer-completed');\n        } else if (timer.remainingSeconds <= 300) { // Last 5 minutes\n            element.classList.add('timer-danger');\n        } else if (timer.remainingSeconds <= 600) { // Last 10 minutes\n            element.classList.add('timer-warning');\n        }\n        \n        // Update pause state and button\n        if (timer.isPaused) {\n            taskItem?.classList.add('paused');\n        } else {\n            taskItem?.classList.remove('paused');\n        }\n        \n        // Update the play/pause button\n        this.updateControlButton(taskItem, timer.isPaused);\n    }\n\n    updateControlButton(taskItem, isPaused) {\n        if (!taskItem) return;\n        \n        const controlsDiv = taskItem.querySelector('.task-controls');\n        if (!controlsDiv) return;\n        \n        // Find the existing play/pause button\n        const existingButton = controlsDiv.querySelector('.btn-success, .btn-warning, .btn-info');\n        if (!existingButton) return;\n        \n        // Create new button based on state\n        const newButton = document.createElement('a');\n        newButton.href = '#';\n        \n        if (isPaused) {\n            newButton.className = 'btn btn-success btn-sm';\n            newButton.innerHTML = '<i class=\"fas fa-play\"></i>';\n            newButton.title = 'Start timer';\n        } else {\n            newButton.className = 'btn btn-warning btn-sm';\n            newButton.innerHTML = '<i class=\"fas fa-pause\"></i>';\n            newButton.title = 'Pause timer';\n        }\n        \n        // Replace the existing button\n        existingButton.replaceWith(newButton);\n    }\n\n    handleTimerCompletion(taskId) {\n        const timer = this.timers.get(taskId);\n        if (!timer) return;\n        \n        console.log(`Timer ${taskId} completed`);\n        \n        // Stop the timer\n        timer.isPaused = true;\n        timer.remainingSeconds = 0;\n        \n        // Save to local storage\n        this.saveTimersToStorage();\n        \n        // Update server about completion\n        this.completeTask(taskId);\n        \n        // Show completion notification\n        this.showCompletionNotification(taskId);\n        \n        // Play completion sound (if available)\n        this.playCompletionSound();\n    }\n\n    async completeTask(taskId) {\n        try {\n            const response = await fetch(`/complete_task/${taskId}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': this.getCSRFToken()\n                }\n            });\n            \n            const data = await response.json();\n            \n            if (data.success && data.completed) {\n                this.handleTaskCompleted(taskId, data.points_earned);\n                console.log(`Task ${taskId} completed! Points earned: ${data.points_earned}`);\n            } else {\n                console.error(`Error completing task ${taskId}:`, data.error || 'Unknown error');\n            }\n        } catch (error) {\n            console.error('Error completing task:', error);\n        }\n    }\n\n    handleTaskCompleted(taskId, pointsEarned) {\n        // Remove timer from active timers\n        this.timers.delete(taskId);\n        \n        // Remove task item from DOM\n        const timer = this.timers.get(taskId);\n        const taskItem = timer?.taskItem;\n        if (taskItem) {\n            taskItem.style.transition = 'opacity 0.5s ease';\n            taskItem.style.opacity = '0';\n            setTimeout(() => {\n                taskItem.remove();\n            }, 500);\n        }\n        \n        // Show completion modal\n        this.showCompletionModal(pointsEarned);\n        \n        // Update stats in UI\n        this.updatePointsDisplay(pointsEarned);\n    }\n\n    showCompletionNotification(taskId, pointsEarned = 0) {\n        // Browser notification\n        if (window.DarkSulFocus?.showNotification) {\n            window.DarkSulFocus.showNotification(\n                'Task Completed!',\n                `Congratulations! You earned ${pointsEarned.toFixed(1)} points.`,\n                '/static/favicon.ico'\n            );\n        }\n        \n        // Toast notification\n        if (window.DarkSulFocus?.showSuccessToast) {\n            window.DarkSulFocus.showSuccessToast('Task completed successfully!');\n        }\n    }\n\n    showCompletionModal(pointsEarned) {\n        const modal = document.getElementById('timerCompleteModal');\n        const pointsElement = document.getElementById('pointsEarned');\n        \n        if (modal && pointsElement) {\n            pointsElement.textContent = `${pointsEarned.toFixed(1)} points`;\n            \n            const bsModal = new bootstrap.Modal(modal);\n            bsModal.show();\n        }\n    }\n\n    updatePointsDisplay(pointsEarned) {\n        // Update total points display if visible\n        const pointsDisplays = document.querySelectorAll('.stat-value, .points-display');\n        pointsDisplays.forEach(element => {\n            if (element.textContent.includes('points') || element.classList.contains('points-display')) {\n                const currentPoints = parseFloat(element.textContent) || 0;\n                const newPoints = currentPoints + pointsEarned;\n                element.textContent = newPoints.toFixed(1);\n            }\n        });\n    }\n\n    playCompletionSound() {\n        // Create and play completion sound\n        try {\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            const oscillator = audioContext.createOscillator();\n            const gainNode = audioContext.createGain();\n            \n            oscillator.connect(gainNode);\n            gainNode.connect(audioContext.destination);\n            \n            oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n            oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);\n            oscillator.frequency.setValueAtTime(800, audioContext.currentTime + 0.2);\n            \n            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);\n            \n            oscillator.start(audioContext.currentTime);\n            oscillator.stop(audioContext.currentTime + 0.3);\n        } catch (error) {\n            console.log('Audio notification not available:', error);\n        }\n    }\n\n    // Local storage persistence - no server sync needed\n    persistTimer(taskId) {\n        this.saveTimersToStorage();\n        console.log(`Timer ${taskId} persisted to local storage`);\n    }\n\n    pauseTimer(taskId) {\n        const timer = this.timers.get(taskId);\n        if (timer && !timer.isPaused) {\n            // Pause server-side timer\n            this.pauseServerTimer(taskId);\n            \n            // Calculate remainingSeconds from endTimestamp\n            if (timer.endTimestamp) {\n                timer.remainingSeconds = Math.max(0, Math.ceil((timer.endTimestamp - Date.now()) / 1000));\n                delete timer.endTimestamp;\n            }\n            timer.isPaused = true;\n            this.updateTimerVisualState(timer);\n            this.saveTimersToStorage();\n            console.log(`Timer ${taskId} paused`);\n        }\n    }\n\n    resumeTimer(taskId) {\n        const timer = this.timers.get(taskId);\n        if (timer && timer.isPaused && timer.remainingSeconds > 0) {\n            // Start server-side timer first\n            this.startServerTimer(taskId);\n            \n            // Pause all other timers first (only one timer can run at a time)\n            this.pauseAllTimers();\n            timer.isPaused = false;\n            timer.lastUpdate = Date.now();\n            // Set endTimestamp for real-time tracking\n            timer.endTimestamp = Date.now() + timer.remainingSeconds * 1000;\n            \n            // Remove any background state flags\n            delete timer.wasRunningWhenBackgrounded;\n            \n            this.updateTimerVisualState(timer);\n            this.saveTimersToStorage();\n            console.log(`Timer ${taskId} resumed - running continuously on server`);\n        }\n    }\n    \n    async startServerTimer(taskId) {\n        try {\n            const response = await fetch(`/start_server_timer/${taskId}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': this.getCSRFToken()\n                }\n            });\n            \n            const data = await response.json();\n            if (data.success) {\n                console.log(`Server timer started for task ${taskId}`);\n            }\n        } catch (error) {\n            console.error('Error starting server timer:', error);\n        }\n    }\n    \n    async pauseServerTimer(taskId) {\n        try {\n            const response = await fetch(`/pause_server_timer/${taskId}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': this.getCSRFToken()\n                }\n            });\n            \n            const data = await response.json();\n            if (data.success) {\n                console.log(`Server timer paused for task ${taskId}`);\n            }\n        } catch (error) {\n            console.error('Error pausing server timer:', error);\n        }\n    }\n    \n    async checkServerCompletion(taskId) {\n        try {\n            const response = await fetch(`/get_timer_status/${taskId}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': this.getCSRFToken()\n                }\n            });\n            \n            const data = await response.json();\n            if (data.success && data.completed) {\n                // Server says task is completed\n                console.log(`Server confirmed task ${taskId} completed with ${data.points_earned} points`);\n                this.handleServerCompletion(taskId, data.points_earned);\n                return true;\n            } else if (data.success && !data.completed && !data.is_completed) {\n                // Task exists but not completed - update remaining time if different\n                const timer = this.timers.get(taskId);\n                if (timer && data.remaining_seconds !== undefined) {\n                    timer.remainingSeconds = data.remaining_seconds;\n                    this.updateTimerDisplay(taskId);\n                }\n            } else if (!data.success && data.error === 'Task not found') {\n                // Task was deleted on server, remove from client\n                console.log(`Task ${taskId} not found on server - removing from client`);\n                this.timers.delete(taskId);\n                this.saveTimersToStorage();\n                return true; // Treat as completed to stop further processing\n            }\n            return false;\n        } catch (error) {\n            console.error('Error checking server completion:', error);\n            return false;\n        }\n    }\n    \n    handleServerCompletion(taskId, pointsEarned) {\n        console.log(`Task ${taskId} completed on server, points: ${pointsEarned}`);\n        \n        // Get timer reference before deleting\n        const timer = this.timers.get(taskId);\n        \n        // Remove timer from local storage immediately\n        this.timers.delete(taskId);\n        this.saveTimersToStorage();\n        \n        // Show completion notification once\n        this.showCompletionNotification(taskId, pointsEarned);\n        \n        // Remove task from DOM with animation\n        if (timer?.taskItem) {\n            timer.taskItem.style.transition = 'opacity 0.5s ease';\n            timer.taskItem.style.opacity = '0';\n            setTimeout(() => {\n                if (timer.taskItem && timer.taskItem.parentNode) {\n                    timer.taskItem.remove();\n                }\n            }, 500);\n        }\n        \n        // Refresh page after a short delay to show updated stats\n        setTimeout(() => {\n            window.location.reload();\n        }, 1500);\n        \n        // Play completion sound\n        this.playCompletionSound();\n    }\n\n    pauseAllTimers() {\n        this.timers.forEach((timer, taskId) => {\n            if (!timer.isPaused) {\n                timer.isPaused = true;\n                this.updateTimerVisualState(timer);\n            }\n        });\n        this.saveTimersToStorage();\n    }\n\n    removeTimer(taskId) {\n        this.timers.delete(taskId);\n        this.saveTimersToStorage();\n    }\n\n    // Create a new timer (when adding tasks)\n    createTimer(taskId, durationMinutes, title) {\n        const timer = {\n            remainingSeconds: durationMinutes * 60,\n            isPaused: true,\n            lastUpdate: Date.now(),\n            totalDuration: durationMinutes * 60,\n            title: title,\n            element: null,\n            taskItem: null\n            // endTimestamp will be set on resume\n        };\n        this.timers.set(taskId, timer);\n        this.saveTimersToStorage();\n        return timer;\n    }\n\n    // Reset a timer to its original duration\n    resetTimer(taskId) {\n        const timer = this.timers.get(taskId);\n        if (timer) {\n            timer.remainingSeconds = timer.totalDuration;\n            timer.isPaused = true;\n            timer.lastUpdate = Date.now();\n            this.updateTimerDisplay(taskId);\n            this.updateTimerVisualState(timer);\n            this.saveTimersToStorage();\n        }\n    }\n\n    formatTime(seconds) {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n\n    getCSRFToken() {\n        const tokenElement = document.querySelector('meta[name=csrf-token]') || \n                            document.querySelector('input[name=csrf_token]');\n        return tokenElement ? tokenElement.content || tokenElement.value : '';\n    }\n\n    setupEventListeners() {\n        // Listen for task control button clicks\n        document.addEventListener('click', (e) => {\n            const taskItem = e.target.closest('.task-item');\n            if (!taskItem) return;\n            \n            const taskId = taskItem.dataset.taskId;\n            if (!taskId) return;\n            \n            // Handle pause/resume buttons\n            if (e.target.closest('.btn-warning, .btn-success')) {\n                e.preventDefault(); // Prevent default link behavior\n                const timer = this.timers.get(taskId);\n                if (timer && timer.isPaused) {\n                    this.resumeTimer(taskId);\n                } else if (timer) {\n                    this.pauseTimer(taskId);\n                }\n            }\n            \n            // Handle delete button\n            if (e.target.closest('.btn-danger')) {\n                this.removeTimer(taskId);\n            }\n        });\n        \n        // Enhanced mobile-friendly page visibility handling\n        document.addEventListener('visibilitychange', () => {\n            this.handleVisibilityChange();\n        });\n        \n        // Additional mobile browser events for better detection\n        window.addEventListener('blur', () => {\n            this.handlePageBackgrounded();\n        });\n        \n        window.addEventListener('focus', () => {\n            this.handlePageForegrounded();\n        });\n        \n        // Mobile Safari specific events\n        window.addEventListener('pagehide', () => {\n            this.handlePageBackgrounded();\n        });\n        \n        window.addEventListener('pageshow', () => {\n            this.handlePageForegrounded();\n        });\n        \n        // Save timers before page unload\n        window.addEventListener('beforeunload', () => {\n            this.saveTimersToStorage();\n        });\n        \n        // Force check for completed timers on any interaction\n        ['touchstart', 'click', 'keydown'].forEach(eventType => {\n            document.addEventListener(eventType, () => {\n                this.checkForCompletedTimers();\n            }, { passive: true });\n        });\n    }\n\n    handleVisibilityChange() {\n        if (document.visibilityState === 'visible') {\n            this.handlePageForegrounded();\n        } else {\n            this.handlePageBackgrounded();\n        }\n    }\n    \n    handlePageBackgrounded() {\n        console.log('Page backgrounded - timers continue running on server');\n        this.isPageVisible = false;\n        this.backgroundStartTime = Date.now();\n        \n        // DON'T pause timers - let them continue running on server\n        // Just stop client-side display updates to save battery\n        this.saveTimersToStorage();\n    }\n    \n    handlePageForegrounded() {\n        console.log('Page foregrounded - checking for completed timers');\n        this.isPageVisible = true;\n        \n        const now = Date.now();\n        const backgroundDuration = this.backgroundStartTime ? \n            Math.floor((now - this.backgroundStartTime) / 1000) : 0;\n        \n        if (backgroundDuration > 0) {\n            console.log(`Was in background for ${backgroundDuration} seconds`);\n        }\n        \n        // Check for server-side completed timers first\n        this.checkForCompletedTimers();\n        \n        // Update timer displays\n        this.findAndInitializeTimers();\n        \n        this.backgroundStartTime = null;\n        this.saveTimersToStorage();\n    }\n    \n    async checkForCompletedTimers() {\n        let hasCompletedTimers = false;\n        const now = Date.now();\n        \n        // Create array copy to avoid modification during iteration\n        const timerEntries = Array.from(this.timers.entries());\n        \n        // Check all timers for completion\n        for (const [taskId, timer] of timerEntries) {\n            // Skip if timer was already removed\n            if (!this.timers.has(taskId)) {\n                continue;\n            }\n            \n            // First check server-side completion\n            const serverCompleted = await this.checkServerCompletion(taskId);\n            if (serverCompleted) {\n                hasCompletedTimers = true;\n                continue; // Server handled completion, skip client-side checks\n            }\n            \n            // Then check client-side completion only if server didn't complete it\n            if (this.timers.has(taskId)) { // Double-check timer still exists\n                // Check if timer was supposed to complete while in background\n                if (timer.endTimestamp && timer.endTimestamp <= now) {\n                    console.log(`Found client-side completed timer: ${taskId}`);\n                    hasCompletedTimers = true;\n                    timer.remainingSeconds = 0;\n                    timer.isPaused = true;\n                    delete timer.endTimestamp;\n                    \n                    // Trigger completion immediately\n                    setTimeout(() => {\n                        if (this.timers.has(taskId)) { // Final check before completion\n                            this.handleTimerCompletion(taskId);\n                        }\n                    }, 100);\n                }\n                // Also check for paused timers with 0 remaining time\n                else if (timer.isPaused && timer.remainingSeconds <= 0) {\n                    console.log(`Found paused completed timer: ${taskId}`);\n                    hasCompletedTimers = true;\n                    setTimeout(() => {\n                        if (this.timers.has(taskId)) { // Final check before completion\n                            this.handleTimerCompletion(taskId);\n                        }\n                    }, 100);\n                }\n            }\n        }\n        \n        return hasCompletedTimers;\n    }\n\n    destroy() {\n        // Save timers before destroying\n        this.saveTimersToStorage();\n        \n        if (this.updateInterval) {\n            clearInterval(this.updateInterval);\n            this.updateInterval = null;\n        }\n        \n        // Don't clear timers - they're saved in local storage\n        this.initialized = false;\n    }\n    \n    // Clear all stored timers (for logout or manual reset)\n    clearAllTimers() {\n        this.timers.clear();\n        localStorage.removeItem(this.storageKey);\n        console.log('All timers cleared from local storage');\n    }\n}\n\n// Initialize timer manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.timerManager = new TimerManager();\n});\n\n// Clean up when page is unloaded\nwindow.addEventListener('beforeunload', function() {\n    if (window.timerManager) {\n        window.timerManager.destroy();\n    }\n});\n\n// Export for global access\nwindow.TimerManager = TimerManager;\n","size_bytes":29020},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298}}}